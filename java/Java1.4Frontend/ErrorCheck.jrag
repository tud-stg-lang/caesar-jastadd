aspect ErrorCheck {

  protected String ASTNode.sourceFile() {
    ASTNode node = this;
    while(node != null && !(node instanceof CompilationUnit))
      node = node.getParent();
    if(node == null)
      return "Unknown file";
    CompilationUnit u = (CompilationUnit)node;
    return u.relativeName();
  }

  public int ASTNode.lineNumber() {
    ASTNode n = this;
    while(n.getParent() != null && n.getStart() == 0) {
      n = n.getParent();
    }
    return getLine(n.getStart());
  }

  public ASTNode ASTNode.setStart(int i) {
    start = i;
    return this;
  }
  public int ASTNode.start() {
    return start;
  }

  public String ASTNode.location() {
    return "" + lineNumber();
  }
  public String ASTNode.errorPrefix() {
    return sourceFile() + ":" + location() + ":\n" + "  *** Semantic Error: ";
  }

  protected java.util.ArrayList CompilationUnit.errors = new java.util.ArrayList();

  //protected String ASTNode.errors = null;
  
  protected void ASTNode.error(String s) {
    ASTNode node = this;
    while(node != null && !(node instanceof CompilationUnit))
      node = node.getParent();
    CompilationUnit cu = (CompilationUnit)node;
    cu.errors.add(errorPrefix() + s);
    //s = errorPrefix() + s;
    //if(errors == null)
    //  errors = s;
    //else
    //  errors = errors + "\n" + s;
  }
  
  /*
  protected boolean ASTNode.hasErrors() {
    return errors != null;
  }
  */

  public void ASTNode.collectErrors(/*Collection collection*/) {
    nameCheck();
    typeCheck();
    accessControl();
    exceptionHandling();
    checkUnreachableStmt();
    definiteAssignment();
    checkModifiers();
    /*
    if(hasErrors())
      collection.add(errors);
    */
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).collectErrors(/*collection*/);
    }
  }

  public void Program.errorCheck(Collection collection) {
    //if(hasErrors())
    //  collection.add(errors);
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit)iter.next();
      if(cu.fromSource()) {
        cu.collectErrors(/*collection*/);
        collection.addAll(cu.errors);
      }
    }
  }

  public void CompilationUnit.errorCheck(Collection collection) {
    collectErrors();
    collection.addAll(errors);
  }
  
  public boolean Program.errorCheck() {
    Collection collection = new LinkedList();
    errorCheck(collection);
    if(collection.isEmpty())
      return false;
    System.out.println("Errors:");
    for(Iterator iter = collection.iterator(); iter.hasNext(); ) {
      String s = (String)iter.next();
      System.out.println(s);
    }
    return true;
  }
}
