aspect GenericsParTypeDecl {
  eq ParTypeDecl.name() {
    StringBuffer s = new StringBuffer();
    s.append(super.name());
    s.append("<");
    for(int i = 0; i < getNumArgument(); i++) {
      if(i != 0)
        s.append(", ");
      s.append(getArgument(i).type().fullName());
    }
    s.append(">");
    return s.toString();
  }

  inh lazy TypeDecl ParTypeDecl.genericDecl();
  eq Program.getCompilationUnit().genericDecl() = null;
  eq GenericClassDecl.getParTypeDecl().genericDecl() = this;
  eq GenericInterfaceDecl.getParTypeDecl().genericDecl() = this;
  eq ParClassDecl.getBodyDecl(int index).genericDecl() {
    if(getBodyDecl(index) instanceof MemberTypeDecl) {
      MemberTypeDecl m = (MemberTypeDecl)getBodyDecl(index);
      return extractSingleType(genericDecl().memberTypes(m.getTypeDecl().name()));
    }
    return genericDecl();
  }
  eq ParInterfaceDecl.getBodyDecl(int index).genericDecl() {
    if(getBodyDecl(index) instanceof MemberTypeDecl) {
      MemberTypeDecl m = (MemberTypeDecl)getBodyDecl(index);
      return extractSingleType(genericDecl().memberTypes(m.getTypeDecl().name()));
    }
    return genericDecl();
  }
  
  syn boolean BodyDecl.visibleTypeParameters() = true;
  eq MethodDecl.visibleTypeParameters() = !isStatic();
  eq FieldDeclaration.visibleTypeParameters() = !isStatic();
  eq StaticInitializer.visibleTypeParameters() = false;
  eq MemberTypeDecl.visibleTypeParameters() = !isStatic();
  
  public Access TypeDecl.createTypeVariableAccess() {
    return createQualifiedAccess();
    //throw new Error("Operation createTypeVariableAcess() is not supported by " + getClass().getName());
  }
  /*
  public Access TypeVariable.createTypeVariableAccess() {
    return enclosingType().createQualifiedAccess().qualifiesAccess(new TypeAccess(name()));
  }
  */

  syn boolean TypeDecl.isTypeVariable() = false;
  eq TypeVariable.isTypeVariable() = true;
  eq ParClassDecl.isTypeVariable() {
    for(int i = 0; i < getNumArgument(); i++)
      if(getArgument(i).type().isTypeVariable())
        return true;
    return false;
  }
  eq ParInterfaceDecl.isTypeVariable() {
    for(int i = 0; i < getNumArgument(); i++)
      if(getArgument(i).type().isTypeVariable())
        return true;
    return false;
  }
  
  public Access ParTypeDecl.createQualifiedAccess() {
    System.out.println("Creating qualified access to " + fullName());
    List typeArgumentList = (List)getArgumentList().fullCopy();
    if(!isTopLevelType()) {
      return enclosingType().createQualifiedAccess().qualifiesAccess(
        new ParameterizedTypeAccess("", getID(), typeArgumentList)
      );
    }
    else {
      return new ParameterizedTypeAccess(packageName(), getID(), typeArgumentList);
    }
  }
}

