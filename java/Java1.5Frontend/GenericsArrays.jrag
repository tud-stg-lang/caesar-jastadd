aspect GenericsArrays {
  refine Arrays eq TypeDecl.arrayType() {
    String name = name() + "[]";
    TypeDecl typeDecl =
      new ArrayDecl(
        new Modifiers(new List().add(new Modifier("public"))),
        name,
        new Opt(typeObject().createQualifiedAccess()), // [SuperClassAccess]
        new List().add(typeCloneable().createQualifiedAccess()).add(typeSerializable().createQualifiedAccess()), // Implements*
        new List().add( // BodyDecl*
          new FieldDeclaration(
            new Modifiers(new List().add(new Modifier("public")).add(new Modifier("final"))),
            new PrimitiveTypeAccess("int"),
            "length",
            new Opt() // [Init:Expr]
          )).add(
          new MethodDecl(
            new Modifiers(new List().add(new Modifier("public"))),
            new ArrayTypeAccess(createQualifiedAccess(), 1),
            "clone",
            new List(),
            new List(),
            new List(),
            new Opt(new Block())
          )
        )
      );
    addDynamicType(typeDecl);
    typeDecl.isFinal = true;
    valueArray = typeDecl;
    computedArray = true;
    return typeDecl;
  }

}
