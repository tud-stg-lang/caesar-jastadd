<!--
 Targets for working from terminal window:
       gen             - generates java files
       cleanGen        - removes all generated files
-->
<project name="caesar2" default="gen">

<!-- location of Java1.4Frontend -->
<property name="Java1.4Frontend" value="java/Java1.4Frontend"/>
<!-- location of Java1.4Backend -->
<property name="Java1.4Backend" value="java/Java1.4Backend"/>
<!-- location of Java1.5Frontend -->
<property name="Java1.5Frontend" value="java/Java1.5Frontend"/>
<!-- location of Java1.5Backend -->
<property name="Java1.5Backend" value="java/Java1.5Backend"/>

<!-- "package" is the directory where generated files will be stored -->
<property name="package" value="org.caesarj.ast"/>

<!-- "tools" is the directory where generators and libraries are located. -->
<property name="tools" value="tools"/>
<!-- "target.dir" is the directory where generated files will be stored -->
<property name="target.dir" value="gen"/>
<!-- "scanner.dir" is the directory where generated scanner files will be stored -->
<property name="scanner.dir" value="gen/scanner"/>
<!-- "parser.dir" is the directory where generated parser files will be stored -->
<property name="parser.dir" value="gen/parser"/>

<!-- "jflex" is an ant task class for the scanner generator in JFlex.jar -->
<taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpath="${tools}/JFlex.jar"/>
<!-- "beaver" is an ant task class for the parser generator in beaver.jar -->
<taskdef name="beaver" classname="beaver.comp.run.AntTask" classpath="${tools}/beaver.jar"/>
<!-- "jastadd" is an ant task class in jastadd2.jar -->
<taskdef name="jastadd" classname="jastadd.JastAddTask" classpath="${tools}/jastadd2.jar"/>

<!-- generate compiler source files and compile sources -->
<target name="gen" depends="scanner,parser">
	<mkdir dir="${target.dir}"/>
	<!-- create AST node types and weave aspect modules -->
	<jastadd package="${package}" rewrite="true" beaver="true" novisitcheck="true" noCacheCycle="true" outdir="${target.dir}" debug="false">
		<fileset dir="${Java1.4Frontend}">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
			<exclude name="BytecodeAttributes.jrag"/>
			<exclude name="BytecodeDescriptor.jrag"/>
			<exclude name="BytecodeReader.jrag"/>
		</fileset>
		<fileset dir="${Java1.4Backend}">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="${Java1.5Frontend}">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="${Java1.5Backend}">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/mixincomp">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/virtclasses">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/deptypes">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/contracts">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/privateinh">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
		<fileset dir="caesar/mixinmethods">
			<include name="**/*.ast"/>
			<include name="**/*.jrag"/>
			<include name="**/*.jadd"/>
		</fileset>
	</jastadd>
	<!-- copy library files-->
	<copy todir="${target.dir}/beaver" preservelastmodified="true">
		<fileset dir="${Java1.4Frontend}/beaver">
			<include name="**/*.java"/>
		</fileset>
	</copy>
</target>

<target name="scanner">
	<mkdir dir="${scanner.dir}"/>
	<!-- compose the scanner -->
	<concat destfile="${scanner.dir}/JavaScanner.flex" binary="true" force="false">
		<filelist dir="${Java1.4Frontend}/scanner">
			<file name="preamble.flex"/>
			<file name="macros.flex"/>
		</filelist>
		<filelist dir="${Java1.5Frontend}">
			<file name="java15macros.flex"/>
		</filelist>
		<filelist dir="${Java1.4Frontend}/scanner">
			<file name="rules_preamble.flex"/>
			<file name="WhiteSpace.flex"/>
			<file name="Comments.flex"/>
			<file name="Keywords.flex"/>
		</filelist>
		<filelist dir="${Java1.5Frontend}">
			<file name="java15keywords.flex"/>
		</filelist>
		<filelist dir="caesar/mixincomp">
			<file name="mixinKeywords.flex"/>
		</filelist>
		<filelist dir="caesar/contracts">
			<file name="contractsKeywords.flex"/>
		</filelist>
		<filelist dir="caesar/privateinh">
			<file name="privateinhKeywords.flex"/>
		</filelist>
		<filelist dir="caesar/mixinmethods">
			<file name="mixinmethodsKeywords.flex"/>
		</filelist>  
		<filelist dir="${Java1.4Frontend}/scanner">
			<file name="Literals.flex"/>
		</filelist>
		<filelist dir="${Java1.5Frontend}">
			<file name="java15literals.flex"/>
		</filelist>
		<filelist dir="${Java1.4Frontend}/scanner">
			<file name="Separators.flex"/>
			<file name="Operators.flex"/>
		</filelist>
		<filelist dir="${Java1.5Frontend}">
			<file name="java15operators.flex"/>
			<file name="java15identifiers.flex"/>
		</filelist>
		<filelist dir="${Java1.4Frontend}/scanner">
			<file name="postamble.flex"/>
		</filelist>
	</concat>
	<!-- generate the scanner -->
	<jflex file="${scanner.dir}/JavaScanner.flex" outdir="${scanner.dir}" nobak="yes"/>
	<copy todir="${scanner.dir}" file="${Java1.4Frontend}/scanner/Unicode.java" preservelastmodified="true"/>
</target>

<target name="parser">
	<mkdir dir="${parser.dir}"/>
	<!-- generate the parser phase 1, create a full .lalr specification from fragments-->
	<concat destfile="${parser.dir}/JavaParser.all" binary="true" force="false">
		<filelist dir="${Java1.4Frontend}">
			<file name="parser/preamble.parser"/>
			<file name="parser/java14.parser"/>
			<file name="parser/errorrecovery.parser"/>
		</filelist>
		<fileset dir="${Java1.5Frontend}">
			<include name="*.parser"/>
		</fileset>
		<fileset dir="caesar/privateinh">
			<include name="*.parser"/>
		</fileset>
		<fileset dir="caesar/mixinmethods">
			<include name="*.parser"/>
		</fileset>
		<!-- <fileset dir="caesar/contracts">
			<include name="*.parser"/>
		</fileset> -->
		<!-- <fileset dir="caesar/virtclasses">
			<include name="*.parser"/>
		</fileset> -->
	</concat>
	<!-- generate the parser phase 2, translating .lalr to .beaver -->
	<java classpath="${tools}/JastAddParser.jar:${tools}/beaver-rt.jar" classname="Main" fork="true">
		<arg line="${parser.dir}/JavaParser.all ${parser.dir}/JavaParser.beaver"/>
	</java>
	<!-- generate the parser phase 3, translating .beaver to .java -->
	<beaver file="${parser.dir}/JavaParser.beaver" terminalNames="yes" compress="yes" useSwitch="yes"/>
</target>

<!-- remove generated source files and .class files -->
<target name="cleanGen">
	<delete includeemptydirs="true">
		<fileset dir="${target.dir}" includes="**/*"/>
	</delete>
</target>

<!-- generating jar files -->
<!-- create compile jar, taking binaries from eclipse's bin folder -->
<target name="compiler.jar">
  <unjar src="${tools}/beaver-rt.jar" dest="./bin">
	<patternset>
        <include name="**/*.class"/>
    </patternset>
  </unjar>
  <jar destfile="${dist.dir}/caesar-compiler.jar" basedir="./bin" includes="**/*.class"
	excludes="org/caesarj/runtime/**/*.class,test**/**">
    <manifest>
      <attribute name="Main-Class" value="org.caesarj.compiler.CaesarCompiler"/>
    </manifest>
  </jar>
</target>

<!-- create runtime jar, taking binaries from eclipse's bin folder -->
<target name="runtime.jar">
  <unjar src="${tools}/asm-3.1.jar" dest="./bin">
	<patternset>
        <include name="**/*.class"/>
    </patternset>
  </unjar>
  <unjar src="${tools}/asm-util-3.1.jar" dest="./bin">
	<patternset>
        <include name="**/*.class"/>
    </patternset>
  </unjar>
  <jar destfile="${dist.dir}/caesar-runtime.jar" basedir="./bin"
	includes="org/caesarj/runtime/**/*.class,org/objectweb/asm/**">
    <manifest>
      <attribute name="Main-Class" value="org.caesarj.runtime.mixer.MixinLoader"/>
    </manifest>
  </jar>
</target>

</project>

