// Implements correct inheritance relationships with contracts

aspect ContractsInheritance {

	/****** 
	 * Overwrite attribute from CjClassDecl responsible for determining superclasses
	 * This allows for subtyping via requirements
	 ******/									  
	eq CjContractClassDecl.getDeclaredParents() {
		Collection parents = new HashSet();
		
		parents.addAll(super.getDeclaredParents());
		
		// Add parents via direct requirements
		parents.addAll(getExplicitRequirements());
		
	    return parents;
	}

	/* Override method in CjVirtualClassDecl to instantiate implicit virtual classes of right type */
	
	syn lazy List CjContractClassDecl.getImplicitClassList() {
		if (isCircular()) { return new List(); }
		List newMembers = new List();
		Iterator i = missingInheritedVirtualClasses().iterator();
		while(i.hasNext()) {
			String name = i.next().toString();
			CjVirtualClassDecl decl = new CjContractClassDecl(
						(Modifiers)getModifiers().fullCopy(),
						name,
						new List(), 
						new List(), 
						new List(),
						new List());
			decl.isImplicit = true;
			newMembers.add(new MemberClassDecl(decl));			
			System.out.println("added "+name+" for "+fullName());
		}		
		return newMembers;	
	}
}