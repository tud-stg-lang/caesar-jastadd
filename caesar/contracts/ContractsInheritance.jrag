// Implements correct inheritance relationships with contracts

aspect ContractsInheritance {

	/****** 
	 * Overwrite attribute from CjClassDecl responsible for determining superclasses
	 * This allows for subtyping via requirements
	 ******/									  
	eq CjContractClassDecl.getDeclaredParents() {
		Collection parents = new HashSet();
		
		// Add parents via direct extends
		parents.addAll(super.getDeclaredParents());
		
		// Add parents via direct requirements
		parents.addAll(getExplicitRequirements());
		
		// But remove interfaces
		parents.removeAll(getReqInterfaces());
		
		// Add required interfaces as implements to enable access to 
		// methods and subtyping via required interfaces
  		Collection c = new ArrayList();
		for(int i = 0; i < getNumImplements(); i++){
     		c.add(getImplements(i));
     	} 
	
        // add required interfaces to allow access to methods 
        // and subtyping via requires
     	for(int i = 0; i < getNumRequiredClasses(); i++){
     		TypeDecl td = (TypeDecl)(getRequiredClasses(i).type());
     		
     		if((td instanceof InterfaceDecl) && !c.contains(getRequiredClasses(i))){
     			addImplements(getRequiredClasses(i));	
     		}
     	}  
     	
	    return parents;
	}

	/* Override method in CjVirtualClassDecl to instantiate implicit virtual classes of right type */
	
	syn lazy List CjContractClassDecl.getImplicitClassList() {
	
		if (isCircular()) { return new List(); }
	
		List newMembers = new List();
		Iterator i = missingInheritedVirtualClasses().iterator();
		while(i.hasNext()) {
			String name = i.next().toString();
	
			CjVirtualClassDecl decl = new CjContractClassDecl(
						(Modifiers)getModifiers().fullCopy(),
						name,
						new List(), 
						new List(), 
						new List(),
						new List());
	
			decl.isImplicit = true;
	
			newMembers.add(new MemberClassDecl(decl));
		}		
		
		return newMembers;	
	}
	
	/* Determine requirements that are interfaces */
	syn Collection CjContractClassDecl.getReqInterfaces() {
		ArrayList reqs = new ArrayList();
	
		for(int i = 0; i < getNumRequiredClasses(); i++){
			TypeDecl td = (TypeDecl)(getRequiredClasses(i).type());
			
			// Requirements via interfaces 
			if(td instanceof InterfaceDecl){ reqs.add(td); }
		}
		
		return reqs;
	}
}