// Implements correct inheritance relationships with contracts

aspect ContractsInheritance {

	/* Inherited name type for non terminals has to be set in sub classes */
	eq CjContractClassDecl.getRequiredClasses().nameType() = NameType.TYPE_NAME;
	eq CjContractClassDecl.getExplicitImplements().nameType() = NameType.TYPE_NAME;

	/****** 
	 * Adds required interfaces to list of implemented interfaces
	 * This allows for subtyping and method access via requirements
	 *
	 * An important change here is that the list of implemented interfaces
	 * from the parser is renamed to ExplicitImplements while the former
	 * list of implemented classes is now computed as a non-terminal to contain
	 * required interfaces. Cf. contracts.ast, virtclass.ast and mixcomp.ast
	 ******/		
	 							 
	syn List CjContractClassDecl.getImplementsList() {
		// If the list has been changed or reset do not overwrite!
		int pos = getImplementsListChildPosition();
		
		if(getChild(pos).numChildren() != 0){
			return (List)getChild(pos);
		} 
	
		// Computing list for the first time so build from scratch
		List c = new List();
		
		for(int i = 0; i < getNumExplicitImplements(); i++){
     		c.add(getExplicitImplements(i));
     	}
	
     	for(int i = 0; i < getNumRequiredClasses(); i++){
     		TypeDecl td = (TypeDecl)(getRequiredClasses(i).type());
     	
     		// If requirement is an interface and not already in list of 
     		// explicitly implemented interfaces
     		if(td instanceof InterfaceDecl && !getExplicitImplements().contains(td)){
     			c.add(getRequiredClasses(i));	
     		}
     	}  
     	
     	return c;
	}
	  
	/****** 
	 * Overwrites attribute from CjClassDecl responsible for determining superclasses
	 * This allows for subtyping and method access via requirements
	 ******/
	 
	eq CjContractClassDecl.getDeclaredParents() {
		Collection parents = new ArrayList();
		
		// Add parents via direct extends; filter duplicates
		for (Iterator i = super.getDeclaredParents().iterator(); i.hasNext(); ) {
			ASTNode dp = (ASTNode)i.next();
			if (!parents.contains(dp)) {
				parents.add(dp);
			}
		}
		
		// Add parents via direct requirements; also filter duplicates via new list
		for (Iterator i = getDeclaredRequirements().iterator(); i.hasNext(); ) {
			ASTNode dp = (ASTNode)i.next();
			if (!parents.contains(dp)) {
				parents.add(dp);
			}
		}
		
		// Remove requirements that are interfaces since
		// these are not to be regarded as superclasses
		parents.removeAll(getReqInterfaces());
		
		return parents;
	}


	/******
	 * Override method in CjVirtualClassDecl to instantiate implicit virtual classes of right type
	 ******/
	public CjVirtualClassDecl CjContractClassDecl.createImplicitClass(Modifiers modifiers, String name) {
		return new CjContractClassDecl(modifiers, name, new List(), new List(), new List(), new List());
	}
	
	/******
	 * Determine requirements that are interfaces
	 ******/
	syn Collection CjContractClassDecl.getReqInterfaces() {
		ArrayList reqs = new ArrayList();
	
		for(int i = 0; i < getNumRequiredClasses(); i++){
			TypeDecl td = (TypeDecl)(getRequiredClasses(i).type());
			
			// Requirements via interfaces 
			if(td instanceof InterfaceDecl){ reqs.add(td); }
		}
		
		return reqs;
	}
}