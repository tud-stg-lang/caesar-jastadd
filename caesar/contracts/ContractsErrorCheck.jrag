// Implements error checking for contracts
//
// Following checks are implemented:
// - Incomplete classes (classes with unfulfilled requirements) can not be instantiated
// - Virtual classes can not have requirements

aspect ContractsErrorCheck{
	
	// Incomplete classes are not instantiable
	public void CjClassInstanceExpr.accessControl() {
		// Super call takes care of abstract classes
    	super.accessControl();
    	
    	// Check now for incomplete classes due to requirements
    	if(type() instanceof CjContractClassDecl) {
    		CjContractClassDecl cd = (CjContractClassDecl)type();
    		 
    		if(!cd.isComplete()) { 
      			String requirements = ":";
      			for(Iterator iter = cd.getRequirements().iterator(); iter.hasNext(); ){
      				requirements += " " + ((ClassDecl)iter.next()).name();
      			}
      			
      			error("Can not instantiate an incomplete class: " + type().fullName()
      				+ " requires" + requirements);
      		}
      	}
  	}
  	
  	// Only top level types can have requirements
  	public void CjContractClassDecl.nameCheck() {
  		super.nameCheck();
  		
  		if(!isTopLevelType() && !getRequirements().isEmpty()){ 
  			String requirements = ":";
      		for(Iterator iter = getRequirements().iterator(); iter.hasNext(); ){
      			requirements += " " + ((ClassDecl)iter.next()).name();
      		}
      		
  			error(name() + " is a (nested) virtual class and requires" + requirements +   
  				" - Only top-level families or normal classes can have requirements.");
  		}
  	}
}