// Implements error checking for contracts
//
// Following checks are implemented:
// - Incomplete classes (classes with unfulfilled requirements) can not be instantiated
// - Virtual classes can not have requirements
// - prohibit direct implementation of required methods

aspect ContractsErrorCheck{
	
	/******
	 * Incomplete classes are not instantiable
	 ******/
	public void CjClassInstanceExpr.accessControl() {
		// Super call takes care of abstract classes
    	super.accessControl();
    	
    	// Check now for incomplete classes due to requirements
    	if(type() instanceof CjContractClassDecl) {
    		CjContractClassDecl cd = (CjContractClassDecl)type();
    		 
    		if(!cd.isComplete()) { 
      			String requirements = ": ";
      		
      			// Determine unfulfilled requirements and issue error	
      			Collection unfulfilled = new ArrayList();
      			unfulfilled.addAll(cd.getRequirements());
      			unfulfilled.removeAll(cd.getProvided()); 
      			
      			for(Iterator iter = unfulfilled.iterator(); iter.hasNext(); ){
      				requirements += ((TypeDecl)iter.next()).name();
      				
      				if(iter.hasNext()){ requirements += ", "; }
      			}
      			
      			error("Can not instantiate an incomplete class: " + type().fullName()
      				+ " has unfulfilled requirements" + requirements);
      		}
      	}
  	}
  	
  	/******
  	 * Only top level types can have requirements
	 ******/
  	public void CjContractClassDecl.nameCheck() {
  		super.nameCheck();
  		
  		if(!isTopLevelType() && !getExplicitRequirements().isEmpty()){ 
  			String requirements = ": ";
      		for(Iterator iter = getRequirements().iterator(); iter.hasNext(); ){
      			requirements += ((TypeDecl)iter.next()).name();
      			
      			if(iter.hasNext()){ requirements += ", "; }
      		}
      		
  			error(name() + " is a (nested) virtual class and requires" + requirements +   
  				" - Only top-level families or normal classes can have requirements.");
  		}
  		
  		disallowReqImp();
  	}


	/******
	 * Direct implementation of required methods is not allowed 	 
	 ******/
	 public void CjContractClassDecl.disallowReqImp() {
	 	// Trivial case: no requirements...
		if(getRequirements().isEmpty()) { return; }
  		
  		// Trivial case: an error to be reported elsewhere
  		if(!(getEnclosingTopLevel() instanceof CjContractClassDecl)){ return; }
  		
  		// Go through unfulfilled reqs and check that no imp exists
		CjContractClassDecl topLevel = (CjContractClassDecl)getEnclosingTopLevel();
		
		Collection unfulfilledReqs = new HashSet(); 
			
		unfulfilledReqs.addAll(topLevel.getRequirements());
		unfulfilledReqs.removeAll(topLevel.getProvided());
			
		for(int i = 0; i < getNumBodyDecl(); i++) {
			if(getBodyDecl(i) instanceof MethodDecl) {
				MethodDecl md = (MethodDecl)getBodyDecl(i);
				
				// Check each method that is implemented
				// But ignore constructors...
				if(md.hasBlock() && !md.name().equals("$cj$init")) {
					for(Iterator iter = unfulfilledReqs.iterator(); iter.hasNext(); ) {
						TypeDecl td = (TypeDecl)iter.next();
					
						if(td instanceof CjContractClassDecl){
							CjContractClassDecl cd = (CjContractClassDecl)td;
				
							if(!cd.memberMethods(md.name()).isEmpty()) {
								error("Implementing a required method directly is forbidden: " 
								+ md.name() + " in " + fullName() + " implements required method " 
								+ md.name() + " in " + cd.name());
							}
						}
						
					}
				}
			}
			
		} 
  	}
}