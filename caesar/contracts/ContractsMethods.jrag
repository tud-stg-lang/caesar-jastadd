// Removes required methods from list of unimplemented methods
// This allows concrete but incomplete classes, 
// i.e. classes not declared abstract, but containing abstract methods via requirements

aspect ContractsMethods {	 

	 /******
	  * Determine all enclosed methods in a cclass
	  ******/
	 syn lazy Collection CjContractClassDecl.enclosedMethods(String nameOfMethod){
	 	// Prevent endless recursion
	 	if(isCircular()) { return Collections.EMPTY_LIST; }
	 	
	 	Collection c = new HashSet();
	 	
	 	// Add member methods
	 	c.addAll(memberMethods(nameOfMethod));
				
		// Add enclosed methods of virtual classes
		for(Iterator iter = getAllVirtualClasses().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				CjContractClassDecl cd = (CjContractClassDecl)td;
			
				c.addAll(cd.enclosedMethods(nameOfMethod));
			}
		}
		
		return c;
	 }
	 
	 /******
	  * Determine the enclosing top-level type
	  ******/
	 syn lazy TypeDecl CjContractClassDecl.getEnclosingTopLevel(){
	 	TypeDecl cd = this;
	 	
	 	while(!cd.isTopLevelType()){
	 		cd = cd.enclosingType();
	 	}
	 	
	 	return cd;
	 }
	 
	 /******
	  * Remove required methods
	  ******/
	 eq CjContractClassDecl.unimplementedMethods() {

		// Get complete list of abstract methods
	 	Collection c = super.unimplementedMethods();
	 	
	 	// Go through all required classes of top-level class and remove found enclosed required methods
	 	if(!(getEnclosingTopLevel() instanceof CjContractClassDecl)){ return c; }
			
	 	CjContractClassDecl topLevel = (CjContractClassDecl)getEnclosingTopLevel();
	 	for (Iterator reqs = topLevel.getRequirements().iterator(); reqs.hasNext(); ) {
	 		TypeDecl td = (TypeDecl)reqs.next();
	 		
	 		if(topLevel.getProvided().contains(td)){
	 			// If requirement is part of contract to be provided (redundant requirement)
	 			// do not remove methods from set of unimplemented methods
	 		}
	 		else if(td instanceof CjContractClassDecl){
				CjContractClassDecl cd = (CjContractClassDecl)td;
		 	
		 		Collection r = new HashSet();
				for(Iterator unimpMethods = c.iterator(); unimpMethods.hasNext(); ){
					MethodDecl m = (MethodDecl)unimpMethods.next();
			
					// Remove methods of top-level class and all enclosed virtual classes
					if(cd.enclosedMethods(m.name()).contains(m)){
						// Add required method to list of methods to be removed
						r.add(m);
					}
				}
				
				c.removeAll(r);
			} else if(td instanceof InterfaceDecl){
				InterfaceDecl id = (InterfaceDecl)td;
				
				Collection r = new HashSet();
				
				for(Iterator unimpMethods = c.iterator(); unimpMethods.hasNext(); ){
					MethodDecl m = (MethodDecl)unimpMethods.next();
			
					// Remove methods declared in interface
					if(id.memberMethods(m.name()).contains(m)){
						// Add required method to list of methods to be removed
						r.add(m);
					}
				}
				
				c.removeAll(r);
			}
			
		}
		
		// Return altered list, required methods have now been removed
		return c;
	 }
}