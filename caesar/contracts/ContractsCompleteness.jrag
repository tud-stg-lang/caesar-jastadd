// Implements new semantic of concrete, abstract and complete classes 
// Based on definition of completeness in doc/caesarj_spec.pdf/Contracts

aspect ContractsCompleteness {

	/******
	 * 1.) <extends> := getDirectExtends() for classes
	 ******/
	syn Collection CjContractClassDecl.getDirectExtends() {
		// Virtual classes  (i.e. nested classes ) are handled differently
		if(isNestedType()){
			return getDirectExtendsForVirtCls();
		}
		
		// For normal and top-level classes direct == declared
		Collection c = new HashSet();
		
		for(int i1 = 0; i1 < getNumSuperClasses(); i1++){
			c.add(getSuperClasses(i1).type());
		}
		
		return c;
	}
	
	/******
	 * 2.) <extends> := getDirectExtends() for interfaces
	 ******/
	syn Collection InterfaceDecl.getDirectExtends() {
		Collection c = new ArrayList();
		
		for(int i = 0; i < getNumSuperInterfaceId(); i++){
			c.add(getSuperInterfaceId(i).type());
		}
		
		return c;
	}
	
	/******
	 * 3,4.) [extends] := getAllExtends() for classes
	 ******/
	syn Collection CjContractClassDecl.getAllExtends() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
	
		c.addAll(getDirectExtends());
		
		// Call recursively (recursion anchor = no extends relationships)
		for(Iterator iter = getDirectExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getAllExtends());
			}
		}
		
		return c;
	}
	
	/******
	 * 3,4.) [extends] := getAllExtends() for interfaces
	 ******/
	syn Collection InterfaceDecl.getAllExtends() {
		// Avoid endless recursion
	 	if(isCircular())  
	 		return Collections.EMPTY_LIST;
	
		Collection c = new ArrayList();
		
		c.addAll(getDirectExtends());
		
		for(Iterator iter = getDirectExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			// Ignore super classes like Object or wrong syntax (an error in the code)
			if(td instanceof InterfaceDecl)
				c.addAll(((InterfaceDecl)td).getAllExtends());
		}
		
		return c;
	}
	
	
	/******
	 * 5.) <implements> := getDeclaredImplements()
	 ******/
	syn Collection CjContractClassDecl.getDeclaredImplements() {
		Collection imps = new ArrayList();
		
		for(int i = 0; i < getNumDeclaredImplements(); i++){
			imps.add(getDeclaredImplements(i).type());
		}
		
		return imps;
	}
	
	/******
	 * 6,7.) [provides] := getDirectProvided()
	 ******/
	syn Collection CjContractClassDecl.getDirectProvided() {
		Collection provided = new HashSet();
	
		// For a concrete class, every contract via extends has to be fulfilled
		provided.addAll(getDirectExtends());
		
		// Implemented interfaces are part of fulfilled contract
		provided.addAll(getDeclaredImplements());
		
		return provided;
	}
	
	/******
	 * 8,9.) [provides] := getProvided()
	 ******/
	syn Collection CjContractClassDecl.getProvided() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
			
		Collection c = new HashSet();
		
		// Add directly provided
		c.addAll(getDirectProvided());
		
		// Call recursively (recursion anchor = no extends relationships)
		for(Iterator iter = getDirectProvided().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				CjContractClassDecl cd = (CjContractClassDecl)td;
				c.addAll(cd.getProvided());				
			}
			
			if(td instanceof InterfaceDecl){
				c.addAll(((InterfaceDecl)td).getAllExtends());
			}
		}
		
		return c;
	}
	
	
	/******
	 * 10a.) Differentiate between declared and explicit requirements
	 ******/
	syn Collection CjContractClassDecl.getDeclaredRequirements(){
		Collection c = new ArrayList();
		
		// Add declared requirements
		for (int i1 = 0; i1 < getNumRequiredClasses(); i1++) {
			c.add(getRequiredClasses(i1).type());
		}
			
		return c;
	}
	

	/******
	 * 10b.) <requires> := getDirectRequirements()
	 ******/

	syn Collection CjContractClassDecl.getDirectRequirements() {
		// Virtual classes  (i.e. nested classes ) are handled differently
		if(isNestedType()){
			return getDirectReqsForVirtCls();
		}
		
		// For normal or top-level classes, direct == declared
		return getDeclaredRequirements();
	}
	
	
	/******
	 * 11 - 16.) [subtypeof] := getSupertypesOf() for classes (i.e. A [subtypeof] B == A.getSupertypesOf().contains(B))
	 ******/
	syn Collection CjContractClassDecl.getSupertypesOf() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
		
		// Add direct extends
		c.addAll(getDirectExtends());
		
		// Add direct requirements
		c.addAll(getDirectRequirements());
		
		// Add declared == direct implements
		c.addAll(getDeclaredImplements());
		
		// Call recursively
		for(Iterator iter = getDirectExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSupertypesOf());
			}
		}			
		
		for(Iterator iter = getDirectRequirements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSupertypesOf());
			}
		}			
		
		for(Iterator iter = getDeclaredImplements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSupertypesOf());
			}
		}			
					
		return c;
	}

	/******
	 * 17 - 19.) [requires] := getRequirements()
	 ******/
	syn Collection CjContractClassDecl.getRequirements() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
		
		// Add direct requirements
		c.addAll(getDirectRequirements());
		
		// Add recursively all supertypes of direct requirements
		for(Iterator iter = getDirectRequirements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSupertypesOf());
			} else if(td instanceof InterfaceDecl){
				// For interfaces, getSupertypesOf simplifies to getAllExtends
				c.addAll(((InterfaceDecl)td).getAllExtends());
			}
		}			
		
		// Add recursively only requirements of extended parents
		for(Iterator iter = getDirectExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getRequirements());
			}
		}			
		
		return c;
	}

	/******
	 * 20.) complete := isComplete()
	 * Virtual classes are exempted from the completeness check.
	 * getReqsForVirtCls() and getProvidedForVirtCls() are however still used to
	 * generalise ContractsMethods.unimplementedMethods() for virtual classes.
	 ******/
	syn boolean CjContractClassDecl.isComplete() 
						= !isAbstract() && (isNestedType() || getProvided().containsAll(getRequirements()));
						
	
	
	/********************************************************************************************************
	 *  Handling virtual classes
	 *******************************************************************************************************/	
	
	/******
	 * Auxiliary method for 10b.) Generalizes getDirectRequirements() for virtual classes 
	 ******/
	syn Collection CjContractClassDecl.getDirectReqsForVirtCls(){
		// Get all direct parents, implicit and explicit
		// Implicit parents are direct furtherbounds
		// Exlplicit parents are declared parents of class and its furtherbounds
		Collection directParents = getDirectParents();
		
		// Determine direct parents whose Enclosing Top Level 
		// is required by ETL of current class
		// These are by definition the direct requirements of a virtual class.
		Collection reqs = new HashSet();
		
		for (Iterator itr = directParents.iterator(); itr.hasNext();) {
			Object o = itr.next();
			if (o instanceof CjContractClassDecl) {
				CjContractClassDecl cd = (CjContractClassDecl) o;
				
				if (getEnclosingTopLevel() instanceof CjContractClassDecl) {
					CjContractClassDecl tl = ((CjContractClassDecl) getEnclosingTopLevel());

					if (tl.getDirectRequirements().contains(cd.getEnclosingTopLevel())) {
						reqs.add(cd);
					}
				}
			}
		}
		
		return reqs;
	}
	
	/******
	 * Auxiliary method for 1.) Generalizes getDirectExtends() for virtual classes 
	 ******/
	syn Collection CjContractClassDecl.getDirectExtendsForVirtCls(){
		Collection c = new ArrayList();
		c.addAll(getDirectParents());
		c.removeAll(getDirectReqsForVirtCls());
		
		return c;
	}
}