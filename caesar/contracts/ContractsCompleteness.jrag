// Implements new semantic of concrete, abstract and complete classes 
// Based on definition of completeness in doc/caesarj_spec.pdf/Contracts

aspect ContractsCompleteness {

	/******
	 * 1.) <extends> := getExplicitExtends() for classes
	 ******/
	syn lazy Collection CjContractClassDecl.getExplicitExtends() {
		Collection c = new HashSet();
		
		for(int i1 = 0; i1 < getNumSuperClasses(); i1++){
			c.add(getSuperClasses(i1).type());
		}
		
		return c;
	}
	
	/******
	 * 2.) <extends> := getExplicitExtends() for interfaces
	 ******/
	syn lazy Collection InterfaceDecl.getExplicitExtends() {
		Collection c = new ArrayList();
		
		for(int i = 0; i < getNumSuperInterfaceId(); i++){
			c.add(getSuperInterfaceId(i).type());
		}
		
		return c;
	}
	
	/******
	 * 3,4.) [extends] := getAllExtends() for classes
	 ******/
	syn lazy Collection CjContractClassDecl.getAllExtends() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
	
		c.addAll(getExplicitExtends());
		
		// Call recursively (recursion anchor = no extends relationships)
		for(Iterator iter = getExplicitExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getAllExtends());
			}
		}
		
		return c;
	}
	
	/******
	 * 3,4.) [extends] := getAllExtends() for interfaces
	 ******/
	syn lazy Collection InterfaceDecl.getAllExtends() {
		// Prevent endless recursion
	 	if(isCircular()) { return Collections.EMPTY_LIST; }
	
		Collection c = new ArrayList();
		
		c.addAll(getExplicitExtends());
		
		for(Iterator iter = getExplicitExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			// Ignore super classes like Object or wrong syntax (an error in the code)
			if(td instanceof InterfaceDecl)
				c.addAll(((InterfaceDecl)td).getAllExtends());
		}
		
		return c;
	}
	
	
	/******
	 * 5.) <implements> := getExplicitImplements()
	 ******/
	syn lazy Collection CjContractClassDecl.getExplicitImplements() {
		Collection imps = new ArrayList();
		
		// add all explicitly implemented
		for(int i = 0; i < getNumExplicitImplements(); i++){
			imps.add(getExplicitImplements(i).type());
		}
		
		return imps;
	}
	
	/******
	 * 6,7.) [provides] := getExplicitProvided()
	 ******/
	syn lazy Collection CjContractClassDecl.getExplicitProvided() {
		Collection provided = new HashSet();
	
		// An abstract class doesn't have to provide anything
		if(!isAbstract()){
			// For a concrete class, every contract via extends has to be fulfilled
			provided.addAll(getExplicitExtends());
			
			// Implemented interfaces are part of fulfilled contract
			provided.addAll(getExplicitImplements());
		}
		
		return provided;
	}
	
	/******
	 * 8,9.) [provides] := getProvided()
	 ******/
	syn lazy Collection CjContractClassDecl.getProvided() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
			
		Collection c = new HashSet();
		
		// Add explicit provided
		c.addAll(getExplicitProvided());
		
		// Call recursively (recursion anchor = no extends relationships)
		for(Iterator iter = getExplicitExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getProvided());
			}
		}
		
		// Call recursively (recursion anchor = no implements relationships)
		if(!isAbstract()){
			for(Iterator iter = getExplicitImplements().iterator(); iter.hasNext(); ){
				TypeDecl td = (TypeDecl)iter.next();
			
				if(td instanceof InterfaceDecl){
					c.addAll(((InterfaceDecl)td).getAllExtends());
				}
			}
		}
		
		return c;
	}
	
	
	
	/******
	 * 10.) <requires> := getExplicitRequirements()
	 ******/

	syn lazy Collection CjContractClassDecl.getExplicitRequirements() {
		Collection c = new HashSet();
		
		// Add explicit (declared) requirements
		for (int i1 = 0; i1 < getNumRequiredClasses(); i1++) {
			c.add(getRequiredClasses(i1).type());
		}
		
		return c;
	}
	
	
	/******
	 * 11 - 16.) [subtypeof] := getSubtypesOf() for classes
	 ******/
	syn lazy Collection CjContractClassDecl.getSubtypesOf() {
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
		
		// Add explicit extends
		c.addAll(getExplicitExtends());
		
		// Add explicit requirements
		c.addAll(getExplicitRequirements());
		
		// Add explicit implements
		c.addAll(getExplicitImplements());
		
		// Call recursively
		for(Iterator iter = getExplicitExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSubtypesOf());
			}
		}			
		
		for(Iterator iter = getExplicitRequirements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSubtypesOf());
			}
		}			
		
		for(Iterator iter = getExplicitImplements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSubtypesOf());
			}
		}			
					
		return c;
	}

	/******
	 * 17 - 19.) [requires] := getRequirements()
	 ******/
	syn lazy Collection CjContractClassDecl.getRequirements() {
		// Virtual classes  (i.e. nested classes ) are handled differently
		if(isNestedType()){
			return getReqsForVirtCls();
		}
	
		// Avoid endless recursion
		if(isCircular())
			return Collections.EMPTY_LIST;
		
		Collection c = new HashSet();
		
		// Add explicit requirements
		c.addAll(getExplicitRequirements());
		
		// Add recursively all subtypes of direct requirements
		for(Iterator iter = getExplicitRequirements().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getSubtypesOf());
			} else if(td instanceof InterfaceDecl){
				// For interfaces, getSubtypesOf simplifies to getAllExtends
				c.addAll(((InterfaceDecl)td).getAllExtends());
			}
		}			
		
		// Add recursively only requirements of extended parents
		for(Iterator iter = getExplicitExtends().iterator(); iter.hasNext(); ){
			TypeDecl td = (TypeDecl)iter.next();
			
			if(td instanceof CjContractClassDecl){
				c.addAll(((CjContractClassDecl)td).getRequirements());
			}
		}			
		
		return c;
	}

	/******
	 * Auxiliary method for 17, 19: Generalizes reqs for virtual classes 
	 ******/
	syn lazy Collection CjContractClassDecl.getReqsForVirtCls(){
		// Get all implicit parents
		Collection parents = getDirectFurtherbounds();
		
		// Return implicit parents whose Enclosing Top Level 
		// is required by ETL of current class
		Collection reqs = new ArrayList();
		for(Iterator itr = parents.iterator(); itr.hasNext(); ){
			CjContractClassDecl cd = (CjContractClassDecl)itr.next();
			if(getEnclosingTopLevel() instanceof CjContractClassDecl){
				CjContractClassDecl tl = ((CjContractClassDecl)getEnclosingTopLevel());
				
			   	if(tl.getRequirements().contains(cd.getEnclosingTopLevel())){
					reqs.add(cd);
				}
			}
		}
		
		return reqs;
	}

	/******
	 * 20.) complete := isComplete()
	 ******/
	syn boolean CjContractClassDecl.isComplete() 
						= !isAbstract() && getProvided().containsAll(getRequirements());
						
}