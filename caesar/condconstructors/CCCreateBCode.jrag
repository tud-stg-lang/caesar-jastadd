/*
 * Adapts byte code creation for conditional constructors
 *
 * (1) In constructor accesses, don't cast to the target parameter type if there is no
 *     matching constructor.
 * (2) For constructor declarations, save additional information about the invocation of
 *     a "this" or "super" constructor in form of an attribute.
 * (3) Separate multiple arguments when calling the super or another this constructor by
 *     NOPs.
 */
aspect CCCreateBCode {

	// Aspect goal (1)
	refine CreateBCode protected void ConstructorAccess.emitCastToIthParameterIfPossible(CodeGeneration gen, int i) {
		if (!decl().equals(unknownConstructor()))
			getArg(i).type().emitCastTo(gen, decl().getParameter(i).type()); // MethodInvocationConversion
	}

	// Aspect goal (2)
	/**
	 * Attribute to be added to constructors in order to save constructor call patterns
	 * @see org.caesarj.runtime.mixer.ConstructorCallAttribute
	 */
	class ConstructorCallAttribute extends Attribute {
	
		public ConstructorCallAttribute(ConstructorDecl decl) {
			super(
					decl.hostType().constantPool(),
					org.caesarj.runtime.mixer.ConstructorCallAttribute.ATTRIBUTE_NAME);
			Stmt constructorInvocation = decl.getConstructorInvocation();
			if (!(constructorInvocation instanceof ExprStmt))
				return;
			Expr expr = ((ExprStmt) constructorInvocation).getExpr();
			if (!(expr instanceof ConstructorAccess))
				return;
			ConstructorAccess access = (ConstructorAccess) expr;
			u1(org.caesarj.runtime.mixer.ConstructorCallAttribute.PARAMETER_PATTERN_LIST);
			int numArg = access.getNumArg();
			u1(numArg - 1);
			ConstantPool pool = decl.hostType().constantPool();
			int emptyUtf8 = pool.addUtf8("");
			/*
			 * Skip the first argument because it is always $cj$outer, the instance
			 * of the outer class.
			 */
			for (int i = 1; i < numArg; i++) {
				Expr arg = access.getArg(i);
				u1(org.caesarj.runtime.mixer.ConstructorCallAttribute.PARAMETER_PATTERN_CONCRETE);
				u2(emptyUtf8); // name
				u2(pool.addUtf8(arg.type().signature())); // type signature
			}
			
			u1(access instanceof SuperConstructorAccess ? 1 : 0);
		}
	}

	// Aspect goal (2)
	eq CjConstructorDecl.attributes() {
		Collection c = super.attributes();
		c.add(new ConstructorCallAttribute(this));
		return c;
	}
	
	// Aspect goal (3)
	refine CreateBCode protected void ConstructorAccess.emitArgument(CodeGeneration gen, int i) {
		CreateBCode.ConstructorAccess.emitArgument(gen, i);
		if (i < getNumArg() - 1)
			gen.emit(Bytecode.NOP);
	}

}