// Implements inheritance links between virtual classes
//  - Generates implicit virtual classes
//  - Defines the direct parents of virtual classes

aspect VCInheritance {
	
	syn boolean TypeDecl.isVirtualClassDecl() = false;
	eq CjVirtualClassDecl.isVirtualClassDecl() = true;
	
	// indirect casting: necessary for dependent types
	syn CjVirtualClassDecl TypeDecl.getVirtualClassDecl() = null;
	eq CjVirtualClassDecl.getVirtualClassDecl() = this;
		
	// collects all explicitly declared virtual classes
	syn lazy Collection CjVirtualClassDecl.getAllVirtualClasses() {
		Collection ret = new ArrayList();
		// add explicit members
		for (int i = 0; i < getNumBodyDecl(); i++) {
			BodyDecl member = getBodyDecl(i);
			if (member instanceof MemberTypeDecl) {
				MemberTypeDecl mtd = (MemberTypeDecl)member;
				TypeDecl type = mtd.typeDecl();
				if (type.isVirtualClassDecl()) {
					ret.add(type);
				}				
			}
		}
		// add implicit members
		for (int i = 0; i < getNumImplicitClass(); i++) {
			ret.add(getImplicitClass(i).typeDecl());			
		}
		return ret;
	}
	
	// change member type lookup to find implicit types
	eq CjVirtualClassDecl.memberTypes(String name) {
		for (Iterator it = getAllVirtualClasses().iterator(); it.hasNext(); ) {
			CjVirtualClassDecl vc = (CjVirtualClassDecl)it.next();
			if (vc.getID().equals(name)) {
				return vc;
			}
		}
		return SimpleSet.emptySet;
	}
	
	// direct parents for virtual class are explicit and implicit superclasses
	eq CjVirtualClassDecl.getDirectParents() {
		Collection parents = new ArrayList();
		parents.addAll(getDirectFurtherbounds());
		parents.addAll(getExplicitParents());
		return parents;
	}			

	// furtherbounds are inherited versions of the virtual class 
	// they have the same names in the superclasses of enclosing type 
	syn lazy Collection CjVirtualClassDecl.getDirectFurtherbounds() {
		if (isNestedType()) {
			TypeDecl outer = enclosingType();
			if (outer instanceof CjVirtualClassDecl) {
				return getFurtherboundsFrom(((CjVirtualClassDecl)outer).getSortedDirectParents());
			}
		}
		return new ArrayList();
	}
	
	// furtherbounds are inherited versions of the virtual class 
	// they have the same names in the superclasses of enclosing type
	// the method return all furtherbounds of the class 
	syn lazy Collection CjVirtualClassDecl.getFurtherboundMixins() {
		if (isNestedType()) {
			TypeDecl outer = enclosingType();
			if (outer instanceof CjVirtualClassDecl) {
				return getFurtherboundsFrom(((CjVirtualClassDecl)outer).mixinList());
			}
		}
		return new ArrayList();
	}
	
	private Collection CjVirtualClassDecl.getFurtherboundsFrom(Collection outers) {
		Collection ret = new ArrayList();
		Iterator i = outers.iterator();
		while (i.hasNext()) {
			TypeDecl outerParent = (TypeDecl)i.next();
			Iterator myParents = outerParent.memberTypes(name()).iterator();
			while (myParents.hasNext()) {
				ret.add(myParents.next());
			}
		}
		return ret;
	}
	
	syn boolean CjVirtualClassDecl.hasFurtherbounds() = !getDirectFurtherbounds().isEmpty();
	
	// finds the top furtherbound of a virtual class
	syn lazy CjVirtualClassDecl CjVirtualClassDecl.getTopFurtherbound() {
		CjVirtualClassDecl lastTFB = null;
		CjVirtualClassDecl currentTFB = this;
		
		for (Iterator fbs = getDirectFurtherbounds().iterator(); fbs.hasNext(); lastTFB = currentTFB) {
			Object fb = fbs.next();
			if (fb instanceof CjVirtualClassDecl) {
				
				currentTFB = ((CjVirtualClassDecl) fb).getTopFurtherbound();
				if (lastTFB != null) {
					if (!lastTFB.equals(currentTFB)) {
						error("Virtual class "+this.name()+" has no well-defined top furtherbound: it might be "+lastTFB.fullName()+ " as well as "+currentTFB.fullName());
					}
				}
			}				
		}
		// return "this" in case it has no furtherbounds, or in case of an error (notably if a direct furtherbound is not of type CjVirtualClassDecl)
		return currentTFB;
	}
	
	// collects all classes from the extends clauses 
	// of the virtual class and its furtherbounds
	syn lazy Collection CjVirtualClassDecl.getExplicitParentNames() {
	    Collection names = new ArrayList();
	    for (Iterator it = getDeclaredParents().iterator(); it.hasNext(); ) {
			String name = ((TypeDecl)it.next()).name();
			names.add(name);
		}
		// iterate over all furtherbounds preciselly according to the order
		// determined by the linearization of the enclosing classes
		// collect parents preciselly in the order they appear in the furtherbounds
		// eliminate duplicate parent names
		for (Iterator it = getFurtherboundMixins().iterator(); it.hasNext();) {
			Object parent = it.next();
			// check if parent is correctly resolved 
			if (parent instanceof CjVirtualClassDecl) {
				for (Iterator it2 = ((CjVirtualClassDecl)parent).getDeclaredParents().iterator();
				     it2.hasNext(); ) {
					String name = ((TypeDecl)it2.next()).name();
					// Note that we cannot use a Set collection, because the order of names is important
					if (!names.contains(name)) {
						names.add(name);
					}				
				}
			}
		}
		return names;
	}
	
	// Gets explicit parent classes of a virtual class: 
	// - the declared parents of it and its furtherbounds
	// The names of the parent classes are resolved in the context of the enclosing class
	eq CjVirtualClassDecl.getExplicitParents() {
		Collection parents = new ArrayList();
		for (Iterator it = getExplicitParentNames().iterator(); it.hasNext();) {
			Iterator it2 = lookupType((String)it.next()).iterator();
			if (it2.hasNext()) {
				TypeDecl decl = (TypeDecl)it2.next();
				parents.add(decl);
			}
		}
		return parents;
	}
	
	// direct parents in the sorted order	
	// - direct furtherbounds (already sorted)
	// - sorted direct explicit parents
	syn lazy Collection CjVirtualClassDecl.getSortedDirectParents() {
		Collection sortedDirect = new ArrayList();
		sortedDirect.addAll(getDirectFurtherbounds());
		sortedDirect.addAll(super.getSortedDirectParents());
		return sortedDirect;
	}
	
	// mixinList attribute holds linearized superclasses' list
	// only explicitly declared classes should be included to the list
	eq CjVirtualClassDecl.mixinList() {
		Collection mixins = new ArrayList();
		mixins.addAll(getFurtherboundMixins());
		for (Iterator it = getSortedParents().iterator(); it.hasNext();) {
			CjVirtualClassDecl parent = (CjVirtualClassDecl)it.next();
			mixins.add(parent);
			mixins.addAll(parent.getFurtherboundMixins());
		}		
		// filter out implicit classes
		Collection filtered = new ArrayList();
		for (Iterator it = mixins.iterator(); it.hasNext();) {
			TypeDecl decl = (TypeDecl)it.next();
			if (!decl.isImplicitType()) {
				filtered.add(decl);
			}
		}
		return filtered;
	}
	
	// Use the type descriptor of the top furtherbound in order to ensure
	// correct method overriding
	eq CjVirtualClassDecl.typeDescriptor() {
		CjVirtualClassDecl topFB = getTopFurtherbound();
		if (topFB == this) {
			return super.typeDescriptor();
		}
		else {
			return topFB.typeDescriptor();
		}
	}
	
	/*********************************************************************************
	 * 
	 *  Implicit virtual classes
	 * 
	 */
	
	// it is not necessary to declare a virtual class if it does not differ from it's implicit superclass
	// but compiler has to create them to have complete inheritance hierarchy
	syn lazy Collection CjVirtualClassDecl.missingInheritedVirtualClasses() {
		HashSet ret = new HashSet();
		// Find all inner classes in all superclasses
		Iterator iter =  getDirectParents().iterator();
		
		while (iter.hasNext()) {
			Object o = iter.next();
			// avoid exception in case when parent is unresolved
			if (o instanceof CjVirtualClassDecl) {
				CjVirtualClassDecl parent = (CjVirtualClassDecl)o;
				Iterator iter2 = parent.getAllVirtualClasses().iterator();
				// check if inner class does not inherit from its outer to avoid endless loop
				if (enclosedBy(parent)) // it will not pass the name check
					return new HashSet();
				while (iter2.hasNext()) {
					TypeDecl inner = (TypeDecl) iter2.next();
					ret.add(inner.name());
				}
			}
		}

		if (!ret.isEmpty()) {
			// Remove classes which are already present in this cclass
			for (int i = 0; i < getNumBodyDecl(); i++) {
				BodyDecl member = getBodyDecl(i);
				if (member instanceof MemberTypeDecl) {
					ret.remove(((MemberTypeDecl) member).typeDecl().name());
				}
			}
		}
		return ret;
	}
	
	public boolean CjVirtualClassDecl.isImplicit = false;
	
	syn boolean TypeDecl.isImplicitType() = false;
	eq CjVirtualClassDecl.isImplicitType() = isImplicit;
			
	public CjVirtualClassDecl CjVirtualClassDecl.createImplicitClass(Modifiers modifiers, String name) {
		return new CjVirtualClassDecl(modifiers, name, new List(), new List(), new List());
	}
			
	// create implicitly inherited virtual classes
	syn lazy List CjVirtualClassDecl.getImplicitClassList() {
		if (isCircular()) { return new List(); }
		List newMembers = new List();
		Iterator i = missingInheritedVirtualClasses().iterator();
		while(i.hasNext()) {
			CjVirtualClassDecl decl = 
				createImplicitClass((Modifiers)getModifiers().fullCopy(), i.next().toString());
			decl.isImplicit = true;
			newMembers.add(new MemberClassDecl(decl));
		}		
		return newMembers;	
	}
	
	// inherited attributes for implicit virtual classes
	eq CjVirtualClassDecl.getImplicitClass().isNestedType() = true;
	eq CjVirtualClassDecl.getImplicitClass().outerScope() = this;
	eq CjVirtualClassDecl.getImplicitClass().isAnonymous() = false;
	eq CjVirtualClassDecl.getImplicitClass().enclosingType() = this;
	eq CjVirtualClassDecl.getImplicitClass().isLocalClass() = false;
	eq CjVirtualClassDecl.getImplicitClass().hostType() = hostType();
	eq CjVirtualClassDecl.getImplicitClass().packageName() = packageName().equals("") ?
		    name() : packageName() + "." + name();
	
	eq CjVirtualClassDecl.getImplicitClass().lookupType(String name) {
        SimpleSet c = memberTypes(name);
        if(!c.isEmpty()) 
        	return c;
        if(name().equals(name))
        	return SimpleSet.emptySet.add(this);

        c = lookupType(name);
        // 8.5.2
        if(isClassDecl() && isStatic() && !isTopLevelType()) {
        	SimpleSet newSet = SimpleSet.emptySet;
        	for(Iterator iter = c.iterator(); iter.hasNext(); ) {
        		TypeDecl d = (TypeDecl)iter.next();
        		if(d.isStatic() || d.isTopLevelType() || this.instanceOf(d.enclosingType())) {
        			newSet = newSet.add(d);
        		}
        	}
        	c = newSet;
        }
        return c;
	}	    
		    
	
	// propagate java2transformation to implicit virtual classes
	// i.e. get them included to the list of nested types
	public void CjVirtualClassDecl.transformation() {
	    super.transformation();
	    for (int i = 0; i < getNumImplicitClass(); i++) {
	    	MemberTypeDecl decl = getImplicitClass(i);
	    	decl.transformation();			
		}	    
	}
}