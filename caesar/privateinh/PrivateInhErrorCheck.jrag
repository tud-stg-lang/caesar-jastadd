// Adds checks that define semantics for private inheritance

aspect ErrorCheck {

    /******
  	 * Only top level types can have used classes
	 ******/
  	public void CjPrivInhClassDecl.nameCheck() {
  		super.nameCheck();
  		
  		if(!isTopLevelType() && getNumUsedClasses() != 0){ 
  			String usedClasses = ": ";
      		for(int i = 0; i < getNumUsedClasses(); i++){
      			usedClasses += ((TypeDecl)getUsedClasses(i).type()).name();
      			
      			if(i < getNumUsedClasses() - 1){ usedClasses += ", "; }
      		}
      		
  			error(name() + " is a (nested) virtual class and uses" + usedClasses +   
  				".  Only top-level families or normal classes can have used classes.");
  		}
  	}
  	

	/*****
 	 * Prevent access from indirect users
 	 *****/
 	 
 	 refine AccessControl eq MethodDecl.accessibleFrom(TypeDecl type) {
 	 	if(!AccessControl.MethodDecl.accessibleFrom(type)){
 	 		// Private inheritance can only reduce accessibility
 	 		return false;
 	 	}
 	 	
 	 	// Refine check by taking usage (private inheritance) into account
 	 	if(type instanceof CjPrivInhClassDecl){
 	 		// not accessible if type uses hostType() (= class declaring method) indirectly
 	 		return !((CjPrivInhClassDecl)type).getIndirectlyUsed().contains(hostType());
 	 	}else
 	 		return true;	
 	 }
  
  	 refine AccessControl eq FieldDeclaration.accessibleFrom(TypeDecl type) {
  		if(!AccessControl.FieldDeclaration.accessibleFrom(type)){
  			// Private inheritance can only reduce accessibility
  			return false;
  		}
  		
  		// Refine check by taking usage (private inheritance) into account
 	 	if(type instanceof CjPrivInhClassDecl)
 	 		// not accessible if type uses hostType() (= class declaring field) indirectly
 	 		return !((CjPrivInhClassDecl)type).getIndirectlyUsed().contains(hostType());
 	 	else
 	 		return true;
  	 }
 	 	
	/*****
 	 * Abstract members and reqs cannot be inherited via uses
 	 *****/
	public void CjPrivInhClassDecl.checkModifiers() {
		super.checkModifiers();
		
		// Check for inherited abstract methods if class is abstract:
		if(isAbstract()){
			for(Iterator iter = unimplementedMethods().iterator(); iter.hasNext();){
				MethodDecl m = (MethodDecl)iter.next();
			
				// If class from which abstract method m originates is a parent via uses -> error
				if(getAllUsed().contains(m.hostType())){
					error("Abstract method " + m.name() + " in " + name() + " cannot be inherited from used class "
					+ m.hostType().name() + " and must be implemented or redeclared.");
				}
			}
		}
		
		// Check for inherited requirements from used classes if not complete:
		if(!isComplete()){
			Collection contractWithoutUsage = new ArrayList();
			contractWithoutUsage.addAll(getProvided());
			contractWithoutUsage.addAll(getRequirements());
			
			Collection requirementsViaUsage = new ArrayList();
			for(Iterator iter = getDirectlyUsed().iterator(); iter.hasNext(); ){
				TypeDecl td = (TypeDecl)iter.next();
				
				if(td instanceof CjPrivInhClassDecl)
					requirementsViaUsage.addAll(((CjPrivInhClassDecl)td).getRequirements());
			}
			
			// Contract without used classes must subsume contract via used classes
			for(Iterator iter = requirementsViaUsage.iterator(); iter.hasNext(); ){
				TypeDecl td = (TypeDecl)iter.next();
				if(!contractWithoutUsage.contains(td)){
					error(name() + " cannot inherit requirement " + td.name() + " via usage (private inheritance)" +
					" and must redeclare or fulfil " + td.name());
				}
			}
		}				
	}    

  	/*****
  	 * Prevent subtyping to used classes
  	 *****/
  	//TODO
  	// Still have to check what can be extended / has to be changed.. what check is carried out when subtyping?   	 
}