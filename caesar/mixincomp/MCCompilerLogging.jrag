aspect MCCompilerLogging {
	
	public boolean Program.logCompiler() {
	    return options().hasOption("-verbose") || options().hasOption("-logcompiler");
	}
	
	public Program ASTNode.getProgram() {
       ASTNode node = this;
       while (node != null && !(node instanceof Program))
          node = node.getParent();
       return (Program)node;
    }
    	
	public void CompilationUnit.collectErrors() {
		if (getProgram().logCompiler()) {
			System.out.println("Checking file " + relativeName() + " for errors");			
		}
		super.collectErrors();
		if (getProgram().logCompiler()) {
			System.out.println("" + errors.size() + " errors found");			
		}		
    }    
	
	public void TypeDecl.collectErrors() {
		if (getProgram().logCompiler()) {
			System.out.println("Checking declaration " + typeName() + " for errors");
		}
		super.collectErrors();
    }
    
    public Collection CompilationUnit.getErrors() {
    	return errors;
	}
}