// Byte code generation for mixin composition:
// - Creates class attributes with the information about inherited mixins.
//   The attributes are used by a special class loader, which creates
//   necessary mixin copies on demands
// - Calls interface separation and creation of accessor methods before byte code 
//   generation

aspect MCByteCode {
	
	// MixerConfigAttribute contains mixin list which is user by classloader to create mixin copies
	class MixerConfigAttribute extends Attribute {
		public MixerConfigAttribute(CjClassDecl decl) {
			super(decl.constantPool(), "de.tud.caesarj.mixerconfig");
			ConstantPool c = decl.constantPool();
			Collection v = decl.mixinList();
			u2(v.size());
			for (Iterator iter = v.iterator(); iter.hasNext();) {
				CjClassDecl cjclass = (CjClassDecl) iter.next(); 
				u2(c.addClass(cjclass.constantPoolName()));
			}
		}
	}
	
	// special attributes for cclasses
	eq CjClassDecl.attributes() {
  		// YANG Baustelle (changed order of attributes)
		Collection c = new Vector();
		if (getDirectParents().size() > 1)
			c.add(new MixerConfigAttribute(this));
		
		// The mechanism for parsing a CjVirtualClassDecl as such (and not as a ClassDecl) relies on
		// the IsCjClassAttribute being set before the generic attributes from TypeDecl.attributes().
		c.add(new IsCjClassAttribute(constantPool()));
		c.add(new CjSuperclassesAttribute((CjClassDecl)this));
		c.addAll(super.attributes());
		
		return c;
	}

   public void CjClassDecl.mixinCompTransform() {
	   // generate interface
	   InterfaceDecl ccifc = getCjInterface();
	   setImplementsList(new List().add(new DirectTypeAccess(ccifc)));
	   ccifc.addAccessorsToBody(this);
	   addAccessorsToBody();
	   addBodyDecl(getRealConstructor());
	}
	
	// changed cclass binary file extension to .cjclass
	// if cclass has more than one superclass - write $$super as superclass
	public void CjClassDecl.generateClassfile() {
		// perform necessary tranformations for mixin composition
		mixinCompTransform();
		// generate byte code of the generated interface
		getCjInterface().generateClassfile();
		// changed caesar binary file extension
    	super.generateClassfile();
	}
	
	public String CjClassDecl.binaryFileExt() {
  	   return ".cjclass";
    }	
	
  class IsCjClassAttribute extends Attribute {
		public IsCjClassAttribute(ConstantPool p) {
			super(p, "de.tud.caesarj.IsCjClass");
			 // attribute of length zero (just like DeprecatedAttribute in Java)
		}
	}

  class CjSuperclassesAttribute extends Attribute {
		public CjSuperclassesAttribute(CjClassDecl decl) {
			super(decl.constantPool(), "de.tud.caesarj.Superclasses");
			ConstantPool c = decl.constantPool();
			Collection list = decl.getDeclaredParents();
			u2(list.size()); 										// cj_superclasses_length
			for(Iterator iter = list.iterator(); iter.hasNext(); ) {
				TypeDecl superclassType = (TypeDecl)iter.next();
				u2(c.addClass(superclassType.constantPoolName()));	// cj_superclasses_index
			}
		}
	}

  class OriginalModifiersAttribute extends Attribute {
		public OriginalModifiersAttribute(ConstantPool cp, MethodDecl decl) {
			super(cp, "de.tud.caesarj.OriginalModifiers");
			final Modifiers m = decl.getModifiers();
			int attributes = 0;
			if(m.isPublic()) attributes |= Modifiers.ACC_PUBLIC;
			if(decl.isPrivate()) attributes |= Modifiers.ACC_PRIVATE;
			if(decl.isProtected()) attributes |= Modifiers.ACC_PROTECTED;
			if(decl.isStatic()) attributes |= Modifiers.ACC_STATIC;
			if(decl.isFinal()) attributes |= Modifiers.ACC_FINAL;
			if(decl.isSynchronized()) attributes |= Modifiers.ACC_SYNCHRONIZED;
			if(decl.isNative()) attributes |= Modifiers.ACC_NATIVE;
			if(m.isAbstract()) attributes |= Modifiers.ACC_ABSTRACT;
			if(decl.isStrictfp()) attributes |= Modifiers.ACC_STRICT;
			u2(attributes);
		}
		public OriginalModifiersAttribute(ConstantPool cp, ConstructorDecl decl) {
			super(cp, "de.tud.caesarj.OriginalModifiers");
			int attributes = 0;
			if(decl.isPublic()) attributes |= Modifiers.ACC_PUBLIC;
			if(decl.isPrivate()) attributes |= Modifiers.ACC_PRIVATE;
			if(decl.isProtected()) attributes |= Modifiers.ACC_PROTECTED;
			u2(attributes);
		}
	}

  refine GenericsCodegen eq MethodDecl.attributes() {
    Collection c = GenericsCodegen.MethodDecl.attributes();
    c.add(new OriginalModifiersAttribute(hostType().constantPool(), this));
    return c;
  }
  
  refine AnnotationsCodegen eq ConstructorDecl.attributes() {
    Collection c = AnnotationsCodegen.ConstructorDecl.attributes();
    c.add(new OriginalModifiersAttribute(hostType().constantPool(), this));
    return c;
  }	
}
