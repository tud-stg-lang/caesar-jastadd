aspect DTExpressionTyping {
	
	/********************************************************
	 * 
	 *  Specify positions where dependent types are allowed
	 * 
	 */
	
	inh lazy boolean Expr.dependentTypesAllowed();
	eq CompilationUnit.getChild().dependentTypesAllowed() = false;
	eq TypeDecl.getBodyDecl().dependentTypesAllowed() = true;
	eq CjVirtualClassDecl.getImplicitClass().dependentTypesAllowed() = true;
	
	// do not allow dependent types in inheritance relations
	eq ClassDecl.getSuperClassAccess().dependentTypesAllowed() = false;
	eq ClassDecl.getImplements().dependentTypesAllowed() = false;
	eq InterfaceDecl.getSuperInterfaceId().dependentTypesAllowed() = false;
	eq CjClassDecl.getSuperClasses().dependentTypesAllowed() = false;
	
	// do not allow dependent types for exceptions
	eq MethodDecl.getException().dependentTypesAllowed() = false;
	eq ConstructorDecl.getException().dependentTypesAllowed() = false;
	eq CatchClause.getParameter().dependentTypesAllowed() = false;
	
	// do not allow dependent types in instantiation expressions
	eq ClassInstanceExpr.getTypeDecl().dependentTypesAllowed() = false;
	eq ClassInstanceExpr.getAccess().dependentTypesAllowed() = false;
	
	// in qualified expressions allow the right side to influence the qualifiers
	eq AbstractDot.getLeft().dependentTypesAllowed() = getRight().dependentPrefixAllowed();
	
	syn boolean Expr.dependentPrefixAllowed() = dependentTypesAllowed();
	eq AbstractDot.dependentPrefixAllowed() = getLeft().dependentPrefixAllowed();
	eq ThisAccess.dependentPrefixAllowed() = false;
	eq SuperAccess.dependentPrefixAllowed() = false;
	
	/********************************************************
	 * 
	 *  Overriding expression typing
	 * 
	 */
	
	// delegate to the computation of dependent type
	refine TypeAnalysis eq TypeAccess.type() {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	}
    refine TypeAnalysis eq VarAccess.type()  {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	}
	refine TypeAnalysis eq ConstructorAccess.type() {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	}
	refine TypeAnalysis eq ThisAccess.type()  {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	}
	refine TypeAnalysis eq ClassInstanceExpr.type()  {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	}
	// TODO: analyze interaction with generics
	refine Generics eq MethodAccess.type()  {
		if (dependentTypesAllowed()) {
			return typeDeclFor(depType());
		}
		else {
			return refined();
		} 
	} 
	
	public TypeDecl Expr.typeDeclFor(DependentType depType) {
		if (depType.isAbsolute()) {
			return depType.absoluteType(hostType());
		}
		else {
			return registerDepType(new DependentTypeDecl(depType, hostType()));
		}
	}
	
	public DependentType Expr.unknownDepType() {
		return new DepTypePlain(unknownType());
	}
	
	/********************************************************
	 * 
	 *  Dependent typing for expressions
	 * 
	 */
	
	// by default proceed to normal type computation
	syn lazy DependentType Expr.depType() = type().depType();

    eq TypeAccess.depType() {
    	try {
	    	TypeDecl decl = decl();
	    	if (decl.isVirtualClassDecl() && decl.isNestedType()) {
	    		CjVirtualClassDecl vcdecl = decl.getVirtualClassDecl(); 
		    	// perform implicit scoping
		    	DependentType outType = qualifierDepType(vcdecl.enclosingType());
		    	if (outType != null) {
			    	return new DepTypeClass(outType, vcdecl);
			    }	    	
			}
	    	// static type reference
			return decl.depType();		
		}
		catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }
    }
    
    eq ThisAccess.depType() {
    	try {
    		DependentType dt = generateOutPathFor(hostType(), decl());
    		return dt == null ? unknownDepType() : dt;
    	}
	    catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }    	
    }
    
    eq VarAccess.depType() {
    	try {
	        Variable decl = decl();
	        TypeDecl declType = decl().type();
	        if (declType.isPrimitive() || declType.isArrayDecl()) {
	    		return declType.depType();
	    	}
	    	if (accessIsFinal()) {
	    		if (decl.isInstanceVariable()) {
	    			// for final instance fields the type is the field access prefixed by the qualifier 
		    		TypeDecl declCtx = decl.hostType();
		    		DependentType varAcc = new DepTypeRelVar(new DepTypeThis(), decl);
		    		return qualifyDepType(varAcc, declCtx);
	    		}
	    		else {
	    			// for final local variables, parameters and static fields, the type is the variable itself
	    			return new DepTypeAbsVar(decl);
	    		}
	    	}
	    	else {
	    		// for non-final variables, fields, parameters take the declared type
	    		return qualifyDepType(declType.depType(), decl.hostType());
	    	}
	    }
	    catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }
    }
    
    eq MethodAccess.depType() {
    	try {    	
    		MethodDecl decl = decl();
    		return decl.substituteType(decl.type(), this, false).depType();
    	}
	    catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }
    }
    
    eq ConstructorAccess.depType() {
    	try {
    		return qualifyDepType(decl().type().depType(), decl().hostType());
    	}
	    catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }	
    }
    
    eq ClassInstanceExpr.depType() {
    	try {
	    	if (hasTypeDecl()) {
	    		return getTypeDecl().depType();    		
	    	}
	    	else {
	    		TypeDecl decl = getAccess().type();
	    		if (decl.isVirtualClassDecl() && decl.isNestedType()) {
	        		CjVirtualClassDecl vcdecl = decl.getVirtualClassDecl(); 
	    	    	// perform implicit scoping
	    	    	DependentType outType = qualifierDepType(vcdecl.enclosingType());
	    	    	if (outType != null) {
	    		    	return new DepTypeClass(outType, vcdecl);
	    		    }	    	
	    		}
	        	// static type reference
	    		return decl.depType();
	    	}
	    }
	    catch (DependentTypeException e) {
	    	// error(e.msg);
	    	return unknownDepType();
	    }	
    }
    
    /********************************************************
	 * 
	 *  leftSide typing
	 * 
	 */
    
    syn lazy TypeDecl Expr.leftSideType() = type();
    
    eq VarAccess.leftSideType() {
        Variable decl = decl();
        TypeDecl declType = decl().type();
        if (declType.isPrimitive() || declType.isArrayDecl()) {
    		return typeDeclFor(declType.depType());
    	}
    	else {
    		return typeDeclFor(qualifyDepType(declType.depType(), decl.hostType()));
    	}
    }
    
    // propagation in qualified and bracketed expressions
    eq AbstractDot.leftSideType() { return  lastAccess().leftSideType(); }
    eq ParExpr.leftSideType() { return  getExpr().type(); }
    
    /********************************************************
	 * 
	 *  Change type checking of the assignment expression
	 * 
	 */
    
    refine TypeCheck public void AssignSimpleExpr.typeCheck() {
        if(!getDest().isVariable())
        	error("left hand side is not a variable");
        else {
        	TypeDecl dt = getDest().leftSideType();
        	TypeDecl st = sourceType();
        	if(!st.assignConversionTo(dt, getSource()) && !st.isUnknown())
        	error("can not assign " + getDest() + " of type " + dt.typeName() +
        			" a value of type " + st.typeName());
        }
    }
    
    /********************************************************
	 * 
	 *  Helper methods
	 * 
	 */
    
    public DependentType Access.qualifyDepType(DependentType type, TypeDecl declaringType) {
    	if (!type.dependsOnThis()) {
    		return type;
    	}
    	DependentType qualType = qualifierDepType(declaringType);
    	if (qualType == null) {
    		throw new DependentTypeException("The reference to 'this' in " 
    						+ type + " could not be resolved in this context"); 
		}
		else {
    		return type.substituteThis(qualType);
    	}
    }
    
    public DependentType Access.qualifierDepType(TypeDecl declaringType) {
    	if (isQualified()) {
    		if (qualifier().staticContextQualifier()) {
    			return null;    			
    		}
    		else {
    			return qualifier().depType();
    		}
    	}
    	else {
    		if (inStaticContext()) {
    			return null;
    		}
    		else {
    			// perform implicit scoping
    			return generateOutPathFor(hostType(), declaringType);
    		}    		
    	}
    }
    
    static public DependentType Expr.generateOutPathFor(TypeDecl hostDecl, TypeDecl targetDecl) {
    	DependentType depType = new DepTypeThis();       
        while (hostDecl != null && !hostDecl.instanceOf(targetDecl)) {
           depType = new DepTypeOut(depType);
           hostDecl = hostDecl.enclosingType();
        }
        if (hostDecl == null) {
        	return null;
        }
        else {
        	return depType;
        }
    }
    
}