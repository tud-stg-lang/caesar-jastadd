// the name of the aspect must be alphabetically smaller
// than the names of aspects that introduce new methods
// to the dependent types
//
aspect DTNoneType {
	
	eq NoneType.subtype(TypeDecl type) = true;
	eq NoneType.isReferenceType() = true;

	inh TypeDecl Expr.noneType();
	eq Program.getChild().noneType() = noneType();

	protected static final String ASTNode.NONE_PACKAGE_NAME = "@none";

	syn lazy TypeDecl Program.noneType() {
		CompilationUnit u = new CompilationUnit();
		u.setPackageDecl(NONE_PACKAGE_NAME);
		addCompilationUnit(u);

		NoneType type = new NoneType();
		type.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
		type.setID("none");
		u.addTypeDecl(type);
		return type;		
	}

	public DependentType Expr.depTypeNone() {
		return new DepTypePlain(noneType());
	}
}