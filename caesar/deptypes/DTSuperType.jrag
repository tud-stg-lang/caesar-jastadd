// Implements the type of super expression in the context of dependent types

aspect DTSuperType {

	// expression typing of super access
	refine TypeAnalysis eq SuperAccess.type() {
		// depType will be a path of form this[.out*]
		DependentType depType = depType();
		return registerDepType(new DependentTypeSuperDecl(depType, hostType()));
	}
	
	// dependent type is identical to that of this access
	eq SuperAccess.depType() {
    	if (isQualified()) {
    		DependentType dt = generateOutPathFor(hostType(), qualifier().type());
    		return dt == null ? unknownDepType() : dt;
    	}
    	else {
    		return new DepTypeThis();    		
    	}
    }

	// the constructor
	// (the generated constructors should not be used)
	public DependentTypeSuperDecl.DependentTypeSuperDecl(DependentType depType, TypeDecl thist) {
		super(depType, thist);
	}
	
	public boolean DependentTypeSuperDecl.equals(Object o) {
		if (!(o instanceof DependentTypeSuperDecl)) {
			return false;
		}
		DependentTypeSuperDecl dt = (DependentTypeSuperDecl)o;
		return depType.equals(dt.depType) && thist.equals(dt.thist);
	}
	
	public int DependentTypeSuperDecl.hashCode() {
		return super.hashCode() + 91;	
	}
	
	// take the super type of the original absolute type of the dependent type
	eq DependentTypeSuperDecl.absoluteType() {
		TypeDecl type = depType().absoluteType(thist);		
		if(!type.isClassDecl())
      		return unknownType();
    	ClassDecl classDecl = type.getClassDecl();
    	if(!classDecl.hasSuperclass())
      		return unknownType();
    	return classDecl.superclass();
	}
	
	/******************************************************************
	 * 
	 * Adjust scoping for creation of super accessors for methods
	 * 
	 */
	
	refine CreateBCode public TypeDecl MethodAccess.superAccessorTarget() {
	    TypeDecl targetDecl = prevExpr().type().absoluteType();
	    TypeDecl enclosing = hostType();
	    do {
	      enclosing = enclosing.enclosingType();
	    } while (!enclosing.instanceOf(targetDecl));
	    return enclosing;
	}
	
	refine Java2Transformations public boolean MethodAccess.needsSuperAccessor() {
		return (!decl().isStatic() && isQualified() && prevExpr().isSuperAccess() && 
				  !hostType().instanceOf(prevExpr().type().absoluteType()));
	}
}