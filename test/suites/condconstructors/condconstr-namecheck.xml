<testsuite name="Test Conditional Constructors" package="condconstructors.namecheck">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error id="condconstr_namecheck001" error="CTOR_NOT_FOUND" description="one non-matching argument">
        <code>
        	public cclass A {
			   public ? A(String x) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public class Main {
				public static void main(String[] args) {
					new A(5);
				}
			}
        </code>
    </compile-check-error>
    
    <compile id="condconstr_namecheck002" description="use default constructor">
        <code>
        	public cclass A {
			}
			public class Main {
				public static void main(String[] args) {
					new A();
				}
			}
        </code>
    </compile>
    
    <compile id="condconstr_namecheck003" description="compile also without matching constructor">
        <code>
        	public cclass A {
			   public ? A() {
			      super("text");
			      System.out.format("A1()%n");
			   }
			}
			public cclass B {
				public ? B(int i) {
					System.out.format("B1(%d)%n", i);
				}
			}
			public cclass C extends A &amp; B {
				public ? C() {
				}
			}
        </code>
    </compile>
    
    <compile-check-error id="condconstr_namecheck004" error="CONSTRUCTOR_NOTFOUND" description="no matching superclass constructor">
        <code>
        	public cclass A {
			   public ? A() {
			      super("text");
			      System.out.format("A1()%n");
			   }
			}
			public cclass B {
				public ? B(int i) {
					System.out.format("B1(%d)%n", i);
				}
			}
			public cclass C extends A &amp; B {
			}
        </code>
    </compile-check-error>
    
    <compile-check-error id="condconstr_namecheck005" error="CTOR_NOT_FOUND" description="no matching constructor inherited">
        <code>
        	public cclass A {
			   public ? A() {
			      super("text");
			      System.out.format("A1()%n");
			   }
			}
			public cclass B {
				public ? B(int i) {
					System.out.format("B1(%d)%n", i);
				}
			}
			public cclass C extends A &amp; B {
				public ? C() {
				}
			}
			public class Main {
				public static void main(String[] args) {
					new C();
				}
			}
        </code>
    </compile-check-error>
    
    <compile id="condconstr_namecheck006" error="CTOR_NOT_FOUND" description="matching constructor inherited">
        <code>
        	public cclass A {
			   public ? A() {
			      super("text");
			      System.out.format("A1()%n");
			   }
			}
			public cclass B {
				public ? B(String s) {
					System.out.format("B1(%s)%n", s);
				}
			}
			public cclass C extends A &amp; B {
				public ? C() {
				}
			}
			public class Main {
				public static void main(String[] args) {
					new C();
				}
			}
        </code>
    </compile>
    
    <compile-run id="condconstr_namecheck007" error="CTOR_NOT_FOUND" description="use non-conditional from conditional constructor">
    	<test>
    		new C();
    	</test>
        <code>
        	public cclass A {
			   public ? A() {
			      super(5);
			      System.out.format("A()%n");
			   }
			}
			public cclass B {
				public B(int i) {
					System.out.format("B(%d)%n", i);
				}
			}
			public cclass C extends A &amp; B {
				public ? C() {
					System.out.format("C()%n");
				}
			}
        </code>
    </compile-run>
    
    <compile-check-error id="condconstr_namecheck008" error="CONSTRUCTOR_NOTFOUND" description="normal constructor: one non-matching argument">
        <code>
        	public cclass A extends B {
			   public A() {
			      super(5);
			      System.out.format("A()%n");
			   }
			}
			public cclass B {
				public B(int i) {
					System.out.format("B(%d)%n", i);
				}
			}
			public cclass C extends A &amp; D {
				public C() {
					System.out.format("C()%n");
				}
			}
			public cclass D extends B {
				public D() {
					super(4);
					System.out.format("D()%n");
				}
			}
        </code>
    </compile-check-error>
    
    <compile-run id="condconstr_namecheck009" description="normal constructor: allow dynamic binding of normal constructor">
    	<test>
    		assertEquals(6, new C().val);
    	</test>
        <code>
        	public cclass A {
			   public A() {
			      System.out.format("A()%n");
			   }
			}
			public cclass B {
				public int val;
				public B(int i) {
					val = i;
					System.out.format("B(%d)%n", i);
				}
			}
			public cclass C extends A &amp; D {
				public C() {
					System.out.format("C()%n");
				}
			}
			public cclass D extends B {
				public D() {
					super(6);
					System.out.format("D()%n");
				}
			}
        </code>
    </compile-run>
    
    <compile id="condconstr_namecheck010" description="normal constructor: allow abstract mixins with non-matching constructors">
        <code>
        	public cclass A {
			   public A() {
			      System.out.format("A()%n");
			   }
			}
			public cclass B {
				public B(int i) {
					System.out.format("B(%d)%n", i);
				}
			}
			public abstract cclass C extends A &amp; B {
				public C() {
					System.out.format("C()%n");
				}
			}
        </code>
    </compile>
    
    <compile-check-error id="condconstr_namecheck011" error="CONSTRUCTOR_NOTFOUND" description="normal constructor: enforce super call check">
        <code>
        	public abstract cclass A {
			   public A() {
			      super(5);
			      System.out.format("A()%n");
			   }
			}
        </code>
    </compile-check-error>
    
    <!--compile-check-error id="condconstr_namecheck001" error="CTOR_NOT_FOUND" description="one non-matching argument">
        <code>
        	public cclass A {
			   public ? A() {
			      super("text");
			      System.out.format("A1()%n");
			   }
			}
			public cclass B {
				public ? B(int i) {
					System.out.format("B1(%d)%n", i);
				}
			}
			public cclass C {
				public ? C(String s) {
					System.out.format("C1(%s)%n", s);
				}
			}
			public cclass D extends A &amp; B {
			}
        </code>
    </compile-check-error-->
    
</testsuite>