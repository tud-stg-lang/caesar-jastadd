<testsuite name="Test Conditional Constructors" package="condconstructors.tests">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <!--compile-run id="test001" description="behavior test">
    	<test>
    		System.out.format("v: %d%n", new C().v);
    		new C();
    	</test>
        <code>
			public cclass A extends B {
			
				public A() {
					super(3);
					System.out.println("A()");
				}

				public A(int i) {
					System.out.format("A(%d)%n", i);
				}

			}

			public cclass B {

				public B() {
					System.out.println("B()");
				}

				public B(int i) {
					System.out.format("B(%d)%n", i);
				}

				public B(String s) {
					System.out.format("B(\"%s\")%n", s);
				}
			
			}
			
			public cclass BB extends D &amp; B {
			
				final public int v;
			
				{
					System.out.println("BB init");
				}
			
				public BB() {
					System.out.println("BB()");
				}
				
				public BB(int value) {
					System.out.format("BB(%d)%n", value);
					v = value;
				}

			}
			
			public cclass D {
			
				public D(int i) {
					System.out.format("D(%d)%n", i);
				}

			}

			public cclass C extends A &amp; BB {

				public C() {
					System.out.println("C()");
				}

			}
       </code>
    </compile-run-->
    
    <!--compile-run id="test002" description="error">
		<test>
			OuterA a = new OuterA();
			//OuterA.InnerX x = a.new InnerX();
			//x.toString();
		</test>
        <code>
			public cclass OuterA {
				public cclass InnerX {
				}
			}
        </code>
    </compile-run-->
	
    <!--compile-run id="test003" description="error">
		<test>
			OuterA a = new OuterA();
			OuterA.InnerX x = a.new InnerX();
			x.m();
		</test>
        <code>
			public cclass OuterA {
				public cclass InnerX {
					public void m() {
						System.out.println(i);
					}
				}
				public int i = 3;
			}
        </code>
    </compile-run-->
     
    <!--compile-run id="test004" description="access method from multiple inheritance">
		<test>
			C c = new C();
			c.m();
			c.m2();
			c.m3();
		</test>
        <code>
			public cclass A {
				public void m() {
					System.out.println("A");
				}
			}
			public cclass B {
				public void m2() {
					System.out.println("B");
				}
			}
			public cclass C extends B &amp; A {
			}
        </code>
    </compile-run-->
     
    <!--compile-run id="test005" description="apply super constructor access to new super class">
    	<test>
    		new DDD("test");
    	</test>
        <code>
        	public cclass AAA {	
			   public AAA(String x) {
			      System.out.format("AAA constructor - got value %s%n", x);
			   }
			}			
			public cclass BBB extends AAA {
			   public BBB() {
			      super("BBB#1");
			      System.out.println("BBB constructor #1");
			   }
			   public BBB(String x) {
			      super(x);
			      System.out.println("BBB constructor #2");
			   }
			}
			public cclass CCC extends AAA {
				public CCC(String x) {
					super(x);
					System.out.println("CCC constructor #1");
				}
			}
			public cclass DDD extends BBB &amp; CCC {
			   public DDD(String x) {
			      super(x); // should call BBB(String) which in turn should call CCC(String)?
			      System.out.println("DDD constructor");
			   }
			}
        </code>
    </compile-run-->
    
    <!--compile-run id="test006" description="Constructor and desired init method">
    	<test>
    		new C("test");
    	</test>
        <code>
        	public cclass A {	
			   public A(String x) {
			      System.out.format("A constructor - got value %s%n", x);
			   }
			   private void $cj$init(String x) {
			      System.out.format("A constructor - got value %s%n", x);
			   }			   
			}			
			public cclass B {
			   public B() {
			      System.out.println("B constructor #1");
			   }
			   private void $cj$init() {
			      System.out.println("B constructor #1");
			   }			   
			   public B(String x) {
			      super(x);
			      System.out.println("B constructor #2");
			   }
			   private void $cj$init(String x) {
			      System.out.println("B constructor #2");
			   }			   
			}
			public cclass C extends B &amp; A {
				public C(String x) {
					super(x);
					System.out.println("C constructor #1");
				}
			   private void $cj$init(String x) {
			      System.out.println("C constructor #1");
			   }			   
			}
        </code>
    </compile-run-->
    
    <!--compile-run id="test006b" description="Constructor and desired init method called">
    	<test>
    		new C("test");
    	</test>
        <code>
        	public cclass A {	
			   public A(String x) {
			      $cj$init(x);
			   }
			   private void $cj$init(String x) {
			      System.out.format("A constructor - got value %s%n", x);
			   }			   
			}			
			public cclass B {
			   public B() {
			      $cj$init();
			   }
			   private void $cj$init() {
			      System.out.println("B constructor #1");
			   }			   
			   public B(String x) {
			      super(x);
			      $cj$init(x);
			   }
			   private void $cj$init(String x) {
			      System.out.println("B constructor #2");
			   }			   
			}
			public cclass C extends B &amp; A {
				public C(String x) {
				  super(x);
			      $cj$init(x);
				}
			   private void $cj$init(String x) {
			      System.out.println("C constructor #1");
			   }			   
			}
        </code>
    </compile-run-->
	
    <!--compile-run id="test007" description="Call method from 2nd superclass">
    	<test>
    		new D().o();
    	</test>
        <code>
        	public cclass A {	
			   public void m() {
			   }		   
			}			
			public cclass X {
			   public void q() {
			   }
			}
			public cclass B extends X {
			   public void n() {
			   }			   
			}
			public cclass C extends A {
			   public void o() {
			      m();
			   }
			}
			public cclass D extends B &amp; C {
			   public void p() {
			      x();
			   }
			}
        </code>
    </compile-run-->
	
</testsuite>