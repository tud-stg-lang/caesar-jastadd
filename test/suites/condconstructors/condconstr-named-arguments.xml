<testsuite name="Test Conditional Constructors" package="condconstructors.namedarguments">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="condconstr_namedarg001" description="two matching named arguments">
    	<test>
    		new B();
    	</test>
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B() {
			      super(x : "test", i : 5);
			      System.out.println("B constructor #1");
			   }
			}
        </code>
    </compile-run>
    
    <compile-run id="condconstr_namedarg002" description="two matching named arguments, inherited">
    	<test>
    		new C();
    	</test>
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B(l*) {
			      super(l*);
			      System.out.println("B constructor #1");
			   }
			}
			public cclass C extends B {
			   public ? C() {
			      super(x : "test", i : 5);
			      System.out.println("C constructor #1");
			   }
			}
        </code>
    </compile-run>
    
    <compile-check-error id="condconstr_namedarg003" error="CTOR_NOT_FOUND" description="one argument with non-matching name">
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B() {
			      super(s : "test", 5);
			      System.out.println("B constructor #1");
			   }
			}
			public class Main {
				public static void main(String[] args) {
					new B();
				}
			}
        </code>
    </compile-check-error>
    
    <compile-run id="condconstr_namedarg004" description="two arguments, one named">
    	<test>
    		new B();
    	</test>
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B() {
			      super(x : "test", 5);
			      System.out.println("B constructor #1");
			   }
			}
        </code>
    </compile-run>
    
    <compile-run id="condconstr_namedarg005" description="set one parameter by name, forward others">
    	<test>
    		B b = new B(1, 3, 4);
    		assertEquals(1, b.a);
    		assertEquals(2, b.b);
    		assertEquals(3, b.c);
    		assertEquals(4, b.d);
    	</test>
        <code>
        	public cclass A {
        	   public int a, b, c, d;
			   public ? A(int a, int b, int c, int d) {
			      this.a = a;
			      this.b = b;
			      this.c = c;
			      this.d = d;
			      System.out.format("A constructor - a = %d, b = %d, c = %d, d = %d%n", a, b, c, d);
			   }
			}
			public cclass B extends A {
			   public ? B(l*, m*) {
			      super(l*, b : 2, m*);
			      System.out.println("B constructor #1");
			   }
			}
        </code>
    </compile-run>
    
    <compile-run id="condconstr_namedarg006" description="set one parameter by name, forward others, with mixins">
    	<test>
    		D d = new D(1);
    		assertEquals(1, d.a);
    		assertEquals(2, d.b);
    		assertEquals(3, d.c);
    		assertEquals(4, d.d);
    	</test>
        <code>
        	public cclass A {
        	   public int a, b, c, d;
			   public ? A(int a, int b, int c, int d) {
			      this.a = a;
			      this.b = b;
			      this.c = c;
			      this.d = d;
			      System.out.format("A constructor - a = %d, b = %d, c = %d, d = %d%n", a, b, c, d);
			   }
			}
			public cclass B extends A {
			   public ? B(l*, m*) {
			      super(l*, b : 2, m*);
			      System.out.println("B constructor #1");
			   }
			}
			public cclass C extends A {
			   public ? C(l*, m*) {
			      super(l*, c : 3, m*);
			      System.out.println("C constructor #1");
			   }
			}
			public cclass D extends B &amp; C {
			   public ? D(l*, m*) {
			      super(l*, d : 4, m*);
			      System.out.println("D constructor #1");
			   }
			}
        </code>
    </compile-run>
    
    <compile-check-error id="condconstr_namedarg007" error="DUPLICATE_DECL"
    		description="two constructors with equal super call signature">
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B() {
			      super(x : "test", i : 5);
			      System.out.println("B constructor #1");
			   }
			   public ? B() {
			      super(x : "abc", i : 6);
			      System.out.println("B constructor #2");
			   }
			}
        </code>
    </compile-check-error>
    
    <compile id="condconstr_namedarg008" description="two constructors with equal super call signature except for one argument name">
        <code>
        	public cclass A {
			   public ? A(String x, int i) {
			      System.out.format("A constructor - got values %s, %d%n", x, i);
			   }
			}
			public cclass B extends A {
			   public ? B() {
			      super(x : "test", i : 5);
			      System.out.println("B constructor #1");
			   }
			   public ? B() {
			      super(s : "abc", i : 6);
			      System.out.println("B constructor #2");
			   }
			}
        </code>
    </compile>
    
</testsuite>