<testsuite name="Basic functionality of virtual classes" package="binary.vc.basics">
	
	<!-- ~~~~~~~~~ 00x: Referencing virtual classes without going deeper ~~~~~~~~~ -->
	
	<compile id="vcbasics000" description="assigning null to a virtual-class-type variable">
		<code>
			public cclass Test{
				public OuterA.InnerA obj = null;
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA { }
			}
        </binary>
    </compile>
		
	<compile id="vcbasics001" description="assigning null to a virtual-class-type variable, multiple virtual classes">
		<code>
			public cclass Test{
				public OuterA.InnerA obj = null;
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA { }
				public cclass InnrA { }
			}
        </binary>
    </compile>
	
	
	<!-- ~~~~~~~~~ 01x: Basic inheritance, referencing virtual classes explicitly ~~~~~~~~~ -->
	
	<!--
	<compile id="vcbasics010" description="accessing a virtual class">
		<code>
			public cclass OuterB extends OuterA {
				public cclass InnerB extends OuterA.InnerA {   // should this be allowed?
				} 
			}
		</code>
        <binary>
			public cclass OuterA {
				public cclass InnerA {
				}
			}
        </binary>
    </compile>
	
	<compile id="vcbasics011" description="accessing a virtual class, longer nesting chain">
		<code>
			public cclass OuterB extends OuterA {
				public cclass InnerB {
					public cclass DeepB extends OuterA.InnerA.DeepA {   // should this be allowed?
					}
				} 
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					public cclass DeepA {
					}
				}
			}
        </binary>
    </compile>
	-->
	
	
	<!-- ~~~~~~~~~ 02x: Instantiating virtual classes ~~~~~~~~~ -->
	
	<compile-check-error id="vcbasics020" error="INSTANCE_METHOD_CALL_IN_STATIC_CONTEXT" description="instantiating a virtual class with default constructor">
		<code>
			public cclass Test {
				private Object innerA = new OuterA.InnerA();
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA { }
			}
        </binary>
    </compile-check-error>
	
	<compile id="vcbasics021" description="instantiating a virtual class with default constructor, using dependent-type reference">
		<code>
			public cclass Test {
				private final OuterA outerA = new OuterA();
				private Object innerA = outerA.new InnerA();
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA { }
			}
        </binary>
    </compile>
	
	<compile-check-error id="vcbasics022" error="INSTANCE_METHOD_CALL_IN_STATIC_CONTEXT" description="instantiating a virtual class directly, with custom constructor">
		<code>
			public cclass Test {
				private Object innerA = new OuterA.InnerA("Hello!");
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					private String message;
					public InnerA(String msg) {
						message = msg;
					}
				}
			}
        </binary>
    </compile-check-error>
	
	<compile id="vcbasics023" description="instantiating a virtual class with custom constructor, using dependent-type reference">
		<code>
			public cclass Test {
				private Object innerA = new OuterA().new InnerA("Hello!");
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					private String message;
					public InnerA(String msg) {
						message = msg;
					}
				}
			}
        </binary>
    </compile>

	
	<!-- ~~~~~~~~~ 03x: Miscellaneous basic functionality ~~~~~~~~~ -->
	
	<compile id="vcbasics030" description="Defining a field inside a virtual class">
		<code>
			public cclass Test{
				public OuterA.InnerA obj = null;
			}
		</code>
        <binary>
			public cclass OuterA {
				public cclass InnerA {
					private String xyz;
				}
			}
        </binary>
    </compile>
	

</testsuite>
