<testsuite name="Basic functionality of virtual classes" package="binary.vc.basics">

	<compile id="basics000" description="assigning null to a virtual-class-type variable">
		<code>
			public cclass Test{
				OuterA.InnerA obj = null;
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
				}
			}
        </binary>
    </compile>
	
	<compile id="basics001" description="accessing a virtual class">
		<code>
			public cclass OuterB extends OuterA {
				public cclass InnerB extends OuterA.InnerA {
				} 
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					private Object x;
					private void doAction() { }
				}
			}
        </binary>
    </compile>
	
	<compile id="basics002" description="accessing a virtual class, longer nesting chain">
		<code>
			public cclass OuterB extends OuterA {
				public cclass InnerB {
					public cclass DeepB extends OuterA.InnerA.DeepA {
					}
				} 
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					public cclass DeepA {
					}
				}
			}
        </binary>
    </compile>
	
	<compile id="basics003" description="instantiating a virtual class with default constructor">
		<code>
			public cclass Test {
				Object innerA = OuterA.new InnerA();
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
				}
			}
        </binary>
    </compile>
	
	<compile id="basics004" description="instantiating a virtual class with custom constructor">
		<code>
			public cclass Test {
				Object innerA = OuterA.new InnerA("Hello!");
			}
		</code>
        <binary>
        	public cclass OuterA {
				public cclass InnerA {
					private String message;
					public InnerA(String msg) {
						message = msg;
					}
				}
			}
        </binary>
    </compile>
	
	<compile id="basics005" description="accessing private members of encapsulating type">
		<code>
			public cclass Test {
				OuterA.InnerA innerA = OuterA.new InnerA();
				innerA.doAction(); 
			}
		</code>
        <binary>
        	public cclass OuterA {
				private String message;
				public cclass InnerA {
					private void doAction() {
						message = "Goodbye";
					}
				}
			}
        </binary>
    </compile>
    	    
	
	<compile id="basics006" description="accessing private members of encapsulating type (should this be allowed?)">
		<code>
			public cclass OuterB extends OuterA {
				public cclass InnerB extends OuterA.InnerA {
					public InnerB(String msg) {
						message = msg;
						doAction();
					}
				} 
			}
		</code>
        <binary>
        	public cclass OuterA {
				private String message;
				private void doAction() { }
				public cclass InnerA {
				}
			}
        </binary>
    </compile>
    	    
</testsuite>
