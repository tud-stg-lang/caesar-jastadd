<testsuite name="Test new operator with Caesar classes" package="vc.newop">
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="METHOD_NOT_FOUND"  id="vcnew001" description="new operator with parameter">
        <code>
        	public class Test {
				public void test() {
					ClassA a = new ClassA(1);
				}
			}
			public cclass ClassA { }
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="vcnew002" description="new array on cclass">
        <code>
        	public class Test {
				public void test() {
					Object a = new ClassA[2];
				}
			}
			public cclass ClassA { }
        </code>
    </compile>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="INSTANCE_METHOD_CALL_IN_STATIC_CONTEXT"  id="vcnew003" description="direct construction of inner class">
	    <code>
        	public class Test {
				public void test() {
					OuterA.InnerA a = new OuterA.InnerA();
				}
			}
			public cclass OuterA {
				public cclass InnerA {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="INSTANCE_METHOD_CALL_IN_STATIC_CONTEXT"  id="vcnew004" description="constructing external inner class">
        <code>
        	public cclass OuterA {
				public cclass InnerA {
				}
			}
			public cclass OuterB {
				public cclass InnerA {
				}
				public void m() {
					InnerA a = new OuterA.InnerA();
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="TYPE_UNKNOWN"  id="vcnew005" description="statically qualified new operator">
        <code>
        	public class Test {
				public void test() {
					OuterA.InnerA a = OuterA.new InnerA();
				}
			}
			public cclass OuterA {
				public cclass InnerA {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="TYPE_UNKNOWN"  id="vcnew006" description="qualified new operator inside cclass">
        <code>
        	public cclass OuterA {
				public cclass InnerA {
				}
				public void m() {
					InnerA a = OuterA.new InnerA();
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="TYPE_UNKNOWN"  id="vcnew007" description="constructing non-existing inner class">
		<!-- error=TYPE_UNKNOWN ??? -->
        <code>
        	public cclass OuterA {
				public cclass InnerA {
				}
			}
			public cclass OuterB extends OuterA {
				public cclass InnerB {
				}
				public void m() {
					OuterB.InnerB a = new OuterA().new InnerB();
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="BAD_THIS_STATIC"  id="vcnew008" description="construction of virtual class in static context">
        <code>
        	public cclass OuterA {
				public cclass InnerA {
				}
				static public void m() {
					InnerA a = new InnerA();
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcnew009" description="constructor with parameter">
	    <test>
			ClassA a = new ClassA(5);
			assertEquals(a.getA(), 5);
		</test>
        <code>
        	public cclass ClassA {
        	    protected int a;
				public ClassA(int a) {
				    this.a = a;
				}
				public int getA() {
					return a;
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="CONSTRUCTOR_BAD_NAME"  id="vcnew010" description="constructor with wrong name">
        <code>
        	public cclass OuterA {
				public foo() {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcnew011" description="constructor with parameter">
	    <test>
			OuterB.InnerA a1 = new OuterB().new InnerA(5);
			assertEquals(a1.getA(), 5);
			assertEquals(a1.getB(), -1);
			OuterB.InnerA a2 = new OuterB().new InnerA(4, 7);
			assertEquals(a2.getB(), 7);
		</test>
        <code>
        	public cclass OuterA {
        		public cclass InnerA {
        			protected int a;
					public InnerA(int a) {
					    this.a = a;
					}
					public int getA() {
						return a;
					}
        		}
			}
			public cclass OuterB extends OuterA {
        		public cclass InnerA {
        			protected int b;
        			public InnerA(int a) {
					    this.a = a;
					    this.b = -1;
					}
					public InnerA(int a, int b) {
					    this.a = a;
					    this.b = b;
					}
					public int getB() {
						return b;
					}
        		}
			}			
        </code>
    </compile-run>
    
    <compile-run id="vcnew012" description="test instance variable initializers in a virtual class">
		<test>
			String expectedResult = "BBB";
			String result = new A().new X(). getA();
			assertEquals(expectedResult, result);
		</test>
        <code>
			public cclass A {
				public cclass X {
					private String a = "BBB";
					public String getA() { return a; }
				}
			}
        </code>
    </compile-run> 
    
    <compile-run id="vcnew013" description="test instance variable initializers in a virtual class">
		<test>
			String expectedResult = "foo";
			A.Y y = new B().new Y();
			String result = y.getX();
			assertEquals(expectedResult, result);
		</test>
        <code>
        	public cclass A {
        		public String y = "foo";
				
				public cclass Y {
					private String x = y;
					public String getX() { return x; }
				}
			}
			public cclass B extends A { }
        </code>
    </compile-run> 
    
    <compile-run id="vcnew014" description="test instance variable initializers in a virtual class">
		<test>
			String expectedResult = "foo";
			A.Y y = new B().new Y();
			String result = y.getX().foo();
			assertEquals(expectedResult, result);
		</test>
        <code>
        	public cclass A {
				public cclass X {
					public String foo() { return "foo"; }
				}
				
				public cclass Y {
					private X x = new X();
					public X getX() { return x; }
				}
			}
			public cclass B extends A { }
        </code>
    </compile-run> 

</testsuite>
