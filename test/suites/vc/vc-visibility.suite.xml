<testsuite name="Test visibility of Caesar classes" package="vc.visibility">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="CCLASS_NOT_PUBLIC"  id="vcvis001" description="non-public cclass">
        <code>
        	cclass OuterA {
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="METHOD_ACCESS_DIFFERENT"  id="vcvis002" description="restricting access in overriden method public -> protected">
        <code>
        	public cclass ClassA {
				public void m() {
				}
			}
			public cclass ClassB extends ClassA {
				protected void m() {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="METHOD_ACCESS_DIFFERENT"  id="vcvis003" description="inner inheritance leads to visibility restriction public -> protected">
        <code>
        	public cclass OuterA {
				public cclass InnerA {
					public void m() {
					}
				}
				public cclass InnerB {
					protected void m() {
					}
				}
			}
			public cclass OuterB extends OuterA {
				public cclass InnerA {
				}
				public cclass InnerB extends InnerA {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="METHOD_ACCESS_DIFFERENT"  id="vcvis004" description="restricting access in overriden method protected -> private">
        <code>
        	public cclass OuterA {
				protected void m() {
				}
			}
			public cclass OuterB extends OuterA {
				private void m() {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="CCLASS_MEMBER_OF_PACKAGE_VIS"  id="vcvis006" description="package visible fields">
        <code>
        	public cclass OuterA {
			    int x;
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="CCLASS_MEMBER_OF_PACKAGE_VIS"  id="vcvis007" description="package visible methods">
        <code>
        	public cclass OuterA {
			    void m() {}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="METHOD_NOT_FOUND"  id="vcvis008" description="accessing private method from subclass">
        <code>
        	public cclass ClassA {
				private void m() {
				}
			}
			public cclass ClassB extends ClassA {
				public void n() {
					m();
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcvis009" description="accessing private method from inner class">
        <test>
            String expected = "A";
            OuterA a = new OuterA();
            String res = a.new InnerA().n();
            assertEquals(expected, res);
        </test>
        <code>            
        	public cclass OuterA {
				private String m() {
				    return "A";
				}
				public cclass InnerA {
					public String n() {
						return OuterA.this.m();
					}
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcvis010" description="accessing protected method from inner class">
        <test>
            String expected = "A";
            OuterA a = new OuterA();
            String res = a.new InnerA().n();
            assertEquals(expected, res);
        </test>
        <code>            
        	public cclass OuterA {
				protected String m() {
				    return "A";
				}
				public cclass InnerA {
					public String n() {
						return OuterA.this.m();
					}
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcvis011" description="accessing protected of the another same class object">
        <test>
            String expected = "A";
            OuterA a = new OuterA();
            String res = a.m(new OuterA());
            assertEquals(expected, res);
        </test>
        <code>
        	public cclass OuterA {
				protected String n() {
				   return "A";
				}
				public String m(OuterA a) {
					return a.n();
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcvis012" description="accessing protected of newly created same class object">
    	<test>
            String expected = "A";
            OuterA a = new OuterA();
            String res = a.m();
            assertEquals(expected, res);
        </test>
        <code>
        	public cclass OuterA {
				protected String n() {
				   return "A";
				}
				public String m() {
					return new OuterA().n();
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="CCLASS_CTOR_NOT_PUBLIC"  id="vcvis013" description="protected cclass constructor">
        <code>
        	public class Test {
				public void test() {
					ClassA a = new ClassA();
				}
			}
			public cclass ClassA {
				protected ClassA() {
				}
			}
        </code>
    </compile-check-error>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error error="VAR_UNKNOWN"  id="vcvis014" description="private access in overriden class">
        <code>
        	public cclass ClassA {
				public cclass InnerA {
					private int a;
				}
			}
			public cclass ClassB extends ClassA {
				public cclass InnerA {
					public void m() {
						a = 2;
					}
				}
			}
        </code>
    </compile-check-error>    
	    
</testsuite>
