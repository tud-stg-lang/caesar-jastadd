<testsuite name="Anonymous classes in VC" package="vc.anonym">

	<common-code-base>		
		interface IfcA {
			public void foo();
		}				
	</common-code-base>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym001" description="Test simple anonymous class">
		<test>			
			new AAA().m();
		</test>
        <code>
        	public cclass AAA {
        		public void m() {
        			IfcA a = new IfcA() {
        				public void foo() {        					
        				}
        			};
        			a.foo();
        		}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym002"  description="Test anonymous class in mixin copy">
		<test>			
			new CCC().m();
		</test>
        <code>
        	public cclass AAA {
        	
        		public cclass Inner{
        		}
        	
        		public void m() {
        			IfcA a = new IfcA() {
        				public void foo() {        					
        				}
        			};
        			a.foo();
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym003" description="Test access to local vars">
		<test>			
			new AAA().m(42);
		</test>
        <code>
        	public cclass AAA {

 				public void m(int y) {
        		    final int x=y+1;
        			IfcA a = new IfcA() {
        				public void foo() {
        				   System.out.println("" + x);        					
        				}
        			};
        			a.foo();
        		}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym004" description="Test access to outer fields">
		<test>			
			new AAA().m();
		</test>
        <code>
        	public cclass AAA {

 				public int o = 1;

        		public void m() {
        		    IfcA a = new IfcA() {
        				public void foo() {
        				   System.out.println("" + o);        					
        				}
        			};
        			a.foo();
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym005" description="Test access to local vars in mixin copy">
		<test>			
			new CCC().m(42);
		</test>
        <code>
        	public cclass AAA {

 				public void m(int y) {
        		    final int x=y+1;
        			IfcA a = new IfcA() {
        				public void foo() {
        				   System.out.println("" + x);        					
        				}
        			};
        			a.foo();
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym006" description="Test access to outer fields in mixin copy">
		<test>			
			new CCC().m();
		</test>
        <code>
        	public cclass AAA {

 				public int o = 1;

        		public void m() {
        		    IfcA a = new IfcA() {
        				public void foo() {
        					System.out.println("" + o);        					
        				}
        			};
        			a.foo();
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
    
     <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym007" description="Test reference to enclosing class name">
		<test>			
			new CCC().m();
		</test>
        <code>
        	public cclass AAA {
				public void m() {
        		    IfcA a = new IfcA() {
        				public void foo() {
        					System.out.println(new AAA().x()); 
        					}
       					};
        			a.foo();
        		}
    			public String x() {
        			return "X";
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
    	    
     <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym008" description="Test reference to enclosing class name 2">
		<test>			
			new CCC().m();
		</test>
        <code>
        	public cclass AAA {
				public void m() {
					AAA aaaa = new AAA();
        		    IfcA a = new IfcA() {
        				public void foo() {
        				}
        			};
        			a.foo();
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
     
     <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="vcanonym009" description="Test reference to other inner class name">
		<test>			
			new CCC().m();
		</test>
        <code>
        	public cclass AAA {
				public void m() {
        		    IfcA a = new IfcA() {
        				public void foo() {
       					System.out.println(new Xxx().x());
      				}
      			};
        			a.foo();
//					new Xxx().x();
        		}
        		
        		
        		public cclass Xxx { 
        			public String x() {
	        			return "X";
	        		}
        		}
			}
			public cclass BBB {
        	}
        	public cclass CCC extends AAA &amp; BBB {
        	}
        </code>
    </compile-run>
</testsuite>
