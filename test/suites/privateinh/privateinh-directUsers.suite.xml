<testsuite name="usage semantics for direct users" package="privateinh.directUsers">

	<compile-run id="directUsers001"
				 description="methods should be accessible">
		
		<code>
			public cclass A {
				public String a(){ return "a"; }
			}
			
			public cclass B uses A {}
		</code>	
		
		<test>
			B b = new B();
			
			assertEquals(b.a(), "a");
		</test>
		
	</compile-run>

	<compile-run id="directUsers002"
				 description="contract fulfilled by used class">
		
		<code>
			public abstract cclass A {
				public abstract String a();
			}
			
			public cclass ProvA extends A {
				public String a() { return "a"; }
			}
			
			public cclass B extends A uses ProvA {}
		</code>	
		
		<test>
			B b = new B();
			
			assertEquals(b.a(), "a");
		</test>
		
	</compile-run>

	<compile-check-error id="directUsers003" 
						 error="???"
						 description="Direct - also abstract - users must fulfil used contract 
						 - i.e. abstract methods cannot be inherited via uses and must be 
						 implemented, redefined or inherited via extends or requires.">
		<code>
			public abstract cclass A {
				public String a() { return "a"; }
				public abstract String ba();
			}
		
			public abstract cclass B uses A {}
		</code>
	</compile-check-error>

	<compile-run id="directUsers004"
				description="Direct users can implement abstract methods inherited via uses.">
		
		<code>
			public abstract cclass A {
				public String a() { return "a"; }
				public abstract String ba();
			}
		
			public cclass B uses A {
			 	public String ba(){ return "b" + a(); }
			}
		</code>	
		
		<test>
			B b = new B();
			
			assertEquals(b.ba(), "ba");
		</test>
		
	</compile-run>
	
	<compile-run id="directUsers005"
				description="Direct users can redeclare abstract methods inherited via uses.">
		
		<code>
			public abstract cclass A {
				public String a() { return "a"; }
				public abstract String ba();
			}
		
			public abstract cclass B uses A {
				public abstract String ba();
				public String abba() { return a() + "b" + ba(); }
			}
			
			public cclass C extends B {
				public String ba() { return "ba"; }
			}
		</code>	
		
		<test>
			C c = new C();
			
			assertEquals(c.abba(), "abba");
		</test>
		
	</compile-run>
	
	<compile-run id="directUsers006"
				description="Direct users can inherit abstract methods in used classes via other extends or requires relationships.">
		
		<code>
			public abstract cclass A extends ContractBA {
				public String a() { return "a"; }
			}
		
			public abstract cclass ContractBA {
				public abstract String ba();
			}
		
			public abstract cclass B extends ContractBA uses A {
				public String abba() { return a() + "b" + ba(); }
			}
			
			public cclass C extends B {
				public String ba() { return "ba"; }
			}
		</code>	
		
		<test>
			C c = new C();
			
			assertEquals(c.abba(), "abba");
		</test>
		
	</compile-run>
</testsuite>