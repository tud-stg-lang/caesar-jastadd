<testsuite name="Usage semantics for indirect users" package="privateinh.indirectUsers">

	<compile-check-error id="indirectUsers001"
						 error="???"
						 description="methods and behaviour are not accessible">
		<code>
			public cclass A {
				public String a() { return "a"; }
			}
	
			public cclass DirectB uses A {}
		
			public cclass IndirectB extends DirectB {}
			
			public class Test {
				public void test(){
					IndirectB b = new IndirectB();
				
					// Should not be accessible
					b.a();
				}
			} 
		</code>
	</compile-check-error>
	
	<compile-check-error id="indirectUsers002"
						 error="???"
						 description="methods and behaviour are not accessible">
		<code>
			public cclass A {
				public String a = "a";
			}
	
			public cclass DirectB uses A {}
		
			public cclass IndirectB extends DirectB {}
			
			public class Test {
				public void test(){
					IndirectB b = new IndirectB();
				
					// Should not be accessible
					String test = b.a;
				}
			} 
		</code>
	</compile-check-error>
	
	<compile-check-error id="indirectUsers003"
						 error="???"
						 description="methods and behaviour are not accessible">
		<code>
			public cclass A {
				public String a() { return "a"; }
			}
	
			public cclass DirectB uses A {}
		
			public cclass IndirectB uses DirectB {}
			
			public class Test {
				public void test(){
					IndirectB b = new IndirectB();
				
					// Should not be accessible
					b.a();
				}
			} 
		</code>
	</compile-check-error>

	<compile-check-error id="indirectUsers004"
						 error="???"
						 description="contracts should not be fulfilled via indirect usage">
		<code>
			public abstract cclass ContractA {
				public abstract String a();
			}
	
			public cclass ProviderA extends ContractA {
				public String a(){ return "a"; };
			}
		
			public cclass DirectB uses ProviderA {}
		
			public cclass IndirectB extends ContractA &amp; DirectB {}
		
			public class Test {
				public void test(){
					// IndirectB should not be instantiable
					IndirectB b = new IndirectB();
				}
			} 
		</code>
	</compile-check-error>

	<compile-check-error id="indirectUsers005"
						 error="???"
						 description="contracts should not be fulfilled via indirect usage">
		<code>
			public abstract cclass ContractA {
				public abstract String a();
			}
	
			public cclass ProviderA extends ContractA {
				public String a(){ return "a"; };
			}
		
			public cclass DirectB uses ProviderA {}
		
			public cclass IndirectB extends ContractA uses DirectB {}
		
			public class Test {
				public void test(){
					// IndirectB should not be instantiable
					IndirectB b = new IndirectB();
				}
			} 
		</code>
	</compile-check-error>
</testsuite>