<testsuite name="usage semantics related to virtual classes" package="privateinh.virtclasses">

	<compile-run id="virtclasses001"
				 description="top-level families can use other classes">
		
		<code>
			public cclass FamilyA {
				public cclass AA {
					public String a() { return "a"; }
				}
			}
		
			public cclass FamilyB uses FamilyA {
				public cclass BB {
					public String ba() { return "b" + (new AA()).a(); }
				}
			}
		
		</code>
		
		<test>
			final FamilyB b = new FamilyB();
			
			FamilyB.BB bb = b.new BB();
			
			assertEquals(bb.ba(), "ba");
		</test>
		
	</compile-run> 
 
 	<compile-check-error id="virtclasses002"
 						 error="VITUAL_WITH_USES"
				 		 description="virtual classes cannot use other classes">
		
		<code>
			public cclass A {
				public String a() { return "a"; }	
			}
			
			public cclass FamilyA {
				public cclass AA uses A {}
			}
		</code>
	</compile-check-error> 
 
 	<compile-check-error id="virtclasses003"
 						 error="???"
				 		 description="Abstract methods in virtual classes cannot be inherited via uses">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String a();
				}
			}

			public abstract cclass FamilyB uses FamilyA {}
			
		</code>
	</compile-check-error> 
  	 	
  	<compile-run id="virtclasses004"
				 description="Abstract methods in virtual classes can be redeclared">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String a();
					public String b(){ return "b";}
				}
			}

			public abstract cclass FamilyB uses FamilyA {
				public cclass AA {
					public abstract String a();
					public String cab() { return "c" + a() + b();}
				}
			}
			
			public cclass FamilyC extends FamilyB {
				public String testCab(){
					AA aa = new AA();
					
					return aa.cab();
				}
			
				public cclass AA {
					public String a() { return "a";}
				}
			}
		</code>
		
		<test>
			FamilyC fc = new FamilyC();
			
			assertEquals(fc.testCab(), "cab");
		</test>
		
	</compile-run> 
	
	<compile-run id="virtclasses005"
				 description="Abstract methods in virtual classes can be implemented">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String aa();
					public String a() { return "a"; }
				}
			}

			public cclass FamilyB uses FamilyA {
				public String testAa() {
					AA aa = new AA();
					return aa.aa();
				}
			
				public cclass AA {
					public String aa() { return a() + a(); }
				}
			}
		</code>
		
		<test>
			FamilyB fb = new FamilyB();
			
			assertEquals(fb.testAa(), "aa");
		</test>
		
	</compile-run> 
  	 	
  	<compile-check-error id="virtclasses006"
 						 error="???"
				 		 description="Required methods in virtual classes cannot be inherited via uses">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String a();
				}
			}

			public cclass FamilyB requires FamilyA {}
			
			public abstract cclass FamilyC uses FamilyB {}
			
		</code>
	</compile-check-error> 
 
 	<compile id="virtclasses007"
				 description="Required methods in virtual classes can be redeclared">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String a();
				}
			}

			public cclass FamilyB requires FamilyA {}
			
			public cclass FamilyC requires FamilyA uses FamilyB {}
		</code>
	</compile> 
 
 	<compile-run id="virtclasses008"
				 description="Required methods in virtual classes can be implemented">
		
		<code>
			public abstract cclass FamilyA {
				public cclass AA {
					public abstract String a();
				}
			}

			public cclass FamilyB requires FamilyA {
				public cclass AA {
					public String ba() { return "b" + a(); }
				}
			}
			
			public cclass FamilyC extends FamilyA uses FamilyB {
				public String testBa() {
					AA aa = new AA();
					
					return aa.ba();
				}
				
				public cclass AA {
					public String a() { return "a"; }
				}
			}
		</code>
		
		<test>
			FamilyC fc = new FamilyC();
			
			assertEquals(fc.testBa(), "ba");
		</test>
		
	</compile-run> 
</testsuite>