<testsuite name="usage semantics with requirements" package="privateinh.requirements">

	<compile-check-error id="requirements001" 
						 error="???"
						 description="requirements via uses must be implemented, redeclared or inherited 
						 via other extends or requires relationships">
		<code>
			public abstract cclass A {
				public abstract String a();
			}
			
			public cclass B requires A {
				public String ab() { return a() + "b"; }
			}
			
			public cclass C uses B {
			 	public String abc() { return ab() + "c"; } 
			}
		</code>
	</compile-check-error>
	
	<compile-run id="requirements002"
				 description="reqs via uses can be implemented">
		
		<code>
			public abstract cclass A {
				public abstract String a();
			}
			
			public cclass B requires A {
				public String ab() { return a() + "b"; }
			}
			
			public cclass C extends A uses B {
				public String a() { return "a"; }
			 	public String abc() { return ab() + "c"; } 
			}
		</code>
		
		<test>
			public class Test{
				public void test(){
					C c = new C();
					
					assertEquals(c.abc(), "abc");
				}
			}
		</test>
		
	</compile-run>
	
	<compile id="requirements003"
				 description="reqs via uses can be redeclared">
		
		<code>
			public abstract cclass A {
				public abstract String a();
			}
			
			public cclass B requires A {
				public String ab() { return a() + "b"; }
			}
			
			public cclass C requires A uses B {
			 	public String abc() { return ab() + "c"; } 
			}
		</code>
	</compile>
	
	<compile-run id="requirements004"
				 description="reqs via uses can be inherited via other means">
		
		<code>
			public abstract cclass A {
				public abstract String a();
			}
			
			public cclass B requires A {
				public String ab() { return a() + "b"; }
			}
			
			public cclass D requires A {
				public String ad() { return a() + "d"; }
			}
			
			public cclass C extends D uses B {
			 	public String abad() { return ab() + ad(); } 
			}
			
			public cclass ProvA extends A {
				public String a() { return "a"; }
			}
			
			public cclass Complete extends C &amp; D {}
		</code>
		
		<test>
			public class Test(){
				public void test(){
					Complete comp = new Complete();
					
					assertEquals(comp.abad(), "abad");
				}
			}
		</test>
	</compile-run>
	
	<compile-check-error id="requirements005" 
				     error="???"
				     description="used classes do not fulfil reqs implicitly">
		
		<code>
			public abstract cclass A {
				public String a();
			}
		
			public cclass B extends A {
				public String a() { return "a"; }
			}
			
			public cclass C requires A {
			 	 public String ca() { return "c" + a(); }
			}
			
			// Although B fulfills requirement of A, this can't be done implicitly
			public cclass D extends C uses B {}
			
			public class Test{
				public void test(){
					// D is incomplete and not instantiable
					D d = new D();
				}
			}
		</code>

	</compile-check-error> 

	<compile-run id="requirements006"
				 description="used classes can however be used to fulfil reqs">
		
		<code>
			public abstract cclass A {
				public String a();
			}
		
			public cclass B extends A {
				public String a() { return "a"; }
			}
			
			public cclass C requires A {
			 	 public String ca() { return "c" + a(); }
			}
			
			// Requirement is explicitly fulfilled using B
			public cclass D extends C &amp; A uses B {}
		</code>
		
		<test>
			D d = new D();
			
			assertEquals(d.ca(), "ca");
		</test>
		
	</compile-run> 

</testsuite> 