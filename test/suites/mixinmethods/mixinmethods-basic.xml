<testsuite name="Basic tests for mixin methods"
	package="mixinmethods.basic">

	<compile-check-error id="mixinmethods001"
						 error="NOT_MIXIN_VALID"
			 			 description="Implicit overriding is disallowed">
		<code>
			public cclass A {
				public String m(){ return "versionA"; }
			}

			public cclass B {
				public String m(){ return "versionB"; }
			}

			public cclass C extends B &amp; A {}

        </code>
	</compile-check-error>
	
	<compile-run id="mixinmethods002"
			 description="Explicit overriding is of course still possible.">
		<code>
			public cclass A {
				public String m(){ return "versionA"; }
			}

			public cclass B {
				public String m(){ return "versionB"; }
			}

			public cclass C extends B &amp; A {
				public String m(){ return "versionC"; }
			}

        </code>
		
		<test>
			C c = new C();
			
			assertEquals("versionC", c.m());
		</test>		 
			 
	</compile-run>
	
	<compile-run id="mixinmethods003"
			 description="Mixin methods can override base versions.">
		<code>
			public cclass A extends Base {
				public String m(){ return "versionA"; }
			}

			public cclass Base {
				public String m() { return "base version";}
			}

			public cclass B extends Base {
				mixinmethod public String m(){ return "mixin versionB"; }
			}

			public cclass C extends B &amp; A {}

        </code>
		
		<test>
			C c = new C();
			
			assertEquals("mixin versionB", c.m());
		</test>		 	 
	</compile-run>
	
	<compile-check-error id="mixinmethods004"
	         error="NOT_MIXIN_VALID"
			 description="Simple methods cannot override mixin methods.">
		<code>
			public cclass A extends Base {
				mixinmethod public String m(){ return "versionA"; }
			}

			public cclass Base {
				public String m() { return "base version";}
			}

			public cclass B extends Base {
				public String m(){ return "mixin versionB"; }
			}

			public cclass C extends B &amp; A {}        
		</code>				 	 
	</compile-check-error>
	
	<compile-check-error id="mixinmethods005"
	         error="NOT_MIXIN_VALID"
			 description="Mixin method is not sufficient by itself.">
		<code>
			public cclass Base {
				mixinmethod public String m() { return "base version";}
			}
		</code>			 	 
	</compile-check-error>
	
	<compile-check-error id="mixinmethods006"
	         error="NOT_MIXIN_VALID"
			 description="Mixin method is not sufficient by itself.">
		<code>
			abstract public cclass Base {
				abstract public String m(); 
			}
			public cclass A extends Base {
				mixinmethod public String m(){ return "versionA"; }
			}
		</code>			 	 
	</compile-check-error>
	
</testsuite>