<testsuite name="TypeSystem" package="typesys.decls">

	<common-code-base>
		public cclass G {
			public N n = null;
			public cclass N {}
        }
	</common-code-base>


	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="nesting001" description="Check nesting of fields in plain Java classes.">
        <code>
			public class A {
			    public final G g1 = new G(); 
			    public g1.N an1 = g1.new N(); 
			    
			    public class U {
			        public final G g2 = new G();        
			        
			        public g1.N un1 = an1;
			        public g2.N un2 = g2.new N();           
			        
			        public class X {
			            public final G g3 = new G();        
			            
			            public g1.N xn1 = an1;
			            public g2.N xn2 = un2;
			            public g3.N xn3 = g3.new N();
			        }
			    }   
			}
        </code>
    </compile>
    
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="nesting002" description="Check nesting of fields in cclass-es.">
        <code>
			public cclass A {
			    public final G g1 = new G(); 
			    public g1.N an1 = g1.new N(); 
			    
			    public cclass U {
			        public final G g2 = new G();        
			        
			        public g1.N un1 = an1;
			        public g2.N un2 = g2.new N();           
			        
			        public cclass X {
			            public final G g3 = new G();        
			            
			            public g1.N xn1 = an1;
			            public g2.N xn2 = un2;
			            public g3.N xn3 = g3.new N();
			        }
			    }   
			}
        </code>     
    </compile>
    

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="ctrlstructs001" description="Check dependent type declarations in control structures.">
        <code>
			public class A {
			    final G g = null; 
			    g.N n;
			    
			    public void foo() {
			        boolean stop = true; 
			        
			        g.N local1 = n;
			        
			        { g.N local2 = n; }
			        
			        if(g == null) {
			            g.N local3 = n;
			        }
			        else {
			            g.N local4 = n;
			        }
			        
			        while(!stop) {
			            g.N local5 = n;
			        }
			        
			        do {
			            g.N local6 = n;
			        } while(!stop);
			        
			        for(g.N local7 = n; !stop; ) {
			            g.N local8 = n;
			        }
			    }   
			}
        </code>     
    </compile>
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="ctrlstructs002" description="Check dependent type declarations in a switch structure without brackets.">
        <code>
			public class A {
			    final G g = null; 
			    g.N n;
			    
			    public void foo() {
			        int i = 0;
			        switch(i) {
			        	case 0: 
			        	    g.N local9 = n;
			        	    break;
			        	default:
			        	    g.N local11 = n;
			        }
			    }   
			}
        </code>     
    </compile>
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="ctrlstructs003" description="Check dependent type declarations in a switch structure with brackets.">
        <code>
			public class A {
			    final G g = new G(); 
			    g.N n;
			    
			    public void foo() {
			        int i = 0;
			        switch(i) {
			        	case 0: { 
			        	    g.N local9 = n;
			        	    break;
			        	}
			        	default: {
			        	    g.N local11 = n;
			        	}
			        }
			    }   
			}
        </code>     
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile-check-error error="VAR_UNKNOWN" id="syntax1" description="Check error messages on unknown family paths.">
        <code>
			public class A {
			    final G g = new G(); 
			    gg.N n;			    
			}
        </code>     
    </compile-check-error>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile-check-error error="TYPE_UNKNOWN" id="syntax2" description="Check error messages on unknown dependent types.">
        <code>
			public class A {
			    final G g = new G(); 
			    g.NN n;			    
			}
        </code>     
    </compile-check-error>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="params001" description="Check parameter as dependent types.">
        <code>
			public class A {
			    final G g = new G(); 			    
			    
			    public void foo(g.N n) {
			        g.N nn = n;
					n = nn;
			    }   
			}
        </code>     
    </compile>	

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="mostspecific001" description="Check access to variables defined in the supercollaboration.">
        <code>
			public cclass GG extends G {
			    public void foo(N nn) {
					n = nn;
			    }   
			}
        </code>     
    </compile>	

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="mostspecific002" description="Check access to variables defined in the supercollaboration.">
        <code>
			public cclass GG extends G {
			    public void foo(N nn) {
					n = nn;
			    }   
			}
			public cclass GGG extends GG {
			    public void foo(N nn) {
					super.foo(nn);
			    }   
			}
        </code>     
    </compile>	

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="anonymous001" description="Check declarations in anonymous.">
        <code>
			public class A {
				private final G g = new G();
				private g.N n = g.new N();
				public void foo() {
					new Runnable() {
						public void run() {
							g.N nn = n;
						}
					}.run();
				}
			}
		</code>
    </compile>

</testsuite>
