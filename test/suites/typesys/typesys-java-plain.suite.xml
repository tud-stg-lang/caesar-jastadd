<testsuite name="Test plain java type checker" package="typesys.plainjava">

	<common-code-base>		
		public cclass G {
			public cclass N {}
		}
	</common-code-base>


	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="binary001" description="Test type checks on binary types.">
        <code>
			public cclass A {
				private String s[] = new String[1];
				public void foo() {
					s[0] = "x";
				}
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="binary002" description="Test type checks on binary types.">
        <code>
			public cclass A {
				private String s;
				public void foo() {
					s = "x";
				}
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="binary003" description="Test type checks on method calls defined in super.">
        <code>
			import javax.swing.*;

			public class A extends JPanel {
				public void foo() {
					this.getWidth();
				}
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="binary004" description="Test type checks on method calls defined in super.">
        <code>
			public class A {
				public void foo() {
					System.out.println();
				}
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="static001" description="Check initializer of static fields.">
        <code>
			public cclass A {
			}
			public class B {
				static A a = new A();
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="static002" description="Check initializer of static fields.">
    	<test>
    		assertNotNull(A.a);
    	</test>
        <code>
			public cclass A {
				public static A a = new A();
			}
		</code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="accessor001" description="Check accessor methods.">
        <code>
			public class A {
				private Object o = new Object();
				public void foo() {
					new Runnable() {
						public void run() {
							o.toString();
						}
					}.run();
				}
			}
		</code>
    </compile>	

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="accessor002" description="Check accessors.">
        <code>
			public class HierarchicalLayoutStrategy {
			    private NodeTree nodeTree = new NodeTree();
			
			    private class NodeTree {			
			        private TreeElement root;
			
			        private void removeNode() {
			            TreeElement t = null;
		                t.parent.children.remove(t);
			        }
			
			        private class TreeElement {		
			        	private TreeElement parent;	
			            private java.util.List children;
			        }			
			    }						    
			}
		</code>
    </compile>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="accessor003" description="Check accessor methods in parameters.">
        <code>
			public class A {
				private Object o = "A string";
			
				public Object foo(final Object obj) {
			
					return new Object() {
						public String toString() {
							if (obj != null)
								return obj.toString();
							return o.toString();
						}
					};
				}
			}
		</code>
    </compile>	
        
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="tsifc001" description="Check assignment to interface.">
        <code>
			public class A {
				private Object o = new Object();
				public void foo() {
					new Runnable() {
						public void run() {
							o.toString();
						}
					}.run();
				}
			}
		</code>
    </compile>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="tsifc001" description="Assign virtual class to interface.">
		<test>
			assertEquals("aaa", new BBB().test());
		</test>
        <code>
        	interface IfcA {
        		public String text();
        	}
        	public cclass BBB {
	        	public cclass AAA implements IfcA {
	        		public String text() {
	        			return "aaa";
	        		}        		
	        	}
	        	public String test() {
	        		IfcA ia;
					ia = new AAA();
					return ia.text();
	        	}
	        }
		</code>
    </compile-run>		
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="tsifc002" description="Call with virtual class as interface.">
		<test>
			assertEquals("aaa", new BBB().test());
		</test>
        <code>
        	interface IfcA {
        		public String text();
        	}
        	public cclass BBB {
	        	public cclass AAA implements IfcA {
	        		public String text() {
	        			return "aaa";
	        		}        		
	        	}
	        	public String foo(IfcA ia) {
					return ia.text();
	        	}
	        	public String test() {
	        		return foo(new AAA());
	        	}
	        }
		</code>
    </compile-run>	
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="tsifc003" description="Return virtual class as interface.">
		<test>
			assertEquals("aaa", new BBB().test());
		</test>
        <code>
        	interface IfcA {
        		public String text();
        	}
        	public cclass BBB {
	        	public cclass AAA implements IfcA {
	        		public String text() {
	        			return "aaa";
	        		}        		
	        	}
	        	public IfcA newA() {
					return new AAA();
	        	}
	        	public String test() {
	        		return newA().text();
	        	}
	        }
		</code>
    </compile-run>	

</testsuite>
