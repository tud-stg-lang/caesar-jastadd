<testsuite name="Test contracts with virtual classes"
	package="contracts.vc">

	<compile-check-error id="vc001" 
						 error="VIRTUAL_WITH_REQ"
						 description="Virtual classes cannot have requirements">
		<code>
			// Define contract
			public abstract cclass ContractA {
				public abstract String a();
			}
			
			// Virtual class with requirement
			public cclass family {
				public cclass VirtualClientA requires ContractA {}
			}
		</code>
	</compile-check-error>

	<compile-run id="vc002"
			 	 description="abstract virtual classes don't belong to contract">
		<code>

			public abstract cclass ContractFamilyA {
				public abstract cclass VirtualClass1 {
					public abstract String a();
				}	
			}

			public cclass ProvA extends ContractFamilyA {}

        </code>
        
        <test>
        	ContractFamilyA ca = new ProvA();	
        </test>
        
	</compile-run>
	
	<compile-run id="vc003"
			 	 description="fulfilled required virtual classes">
		<code>

			public cclass ProvA {
				public cclass A {
					public String s;
					
					public A(String s){
						this.s = s;
					}
				}	
			}
			
			public cclass UserA requires ProvA {
				public A createA(){
					return new A("a"); 
				}
			}
			
			public cclass CompleteA extends UserA &amp; ProvA {}

        </code>
        
        <test>
			CompleteA ca = new CompleteA();
			
			assertEquals(ca.createA().s, "a");	
        </test>
        
	</compile-run>
	
	<compile id="vc004"
			 	 description="fulfilled required virtual classes">
		<code>
			public abstract cclass A {
			    public abstract cclass Y { }	
			}
			
			public abstract cclass E extends A {
				public cclass X extends Y {}
			}
			
			public abstract cclass F extends A {
				public abstract cclass Y {
					public abstract void m();
				}
			}
			
			public cclass B requires E &amp; F {
				public cclass X {
					public void n() { m(); }
				}
			}
        </code>
        
	</compile>
		
		
	<compile id="vc005" description="unimplemented methods via requirements should be ignored for concreteness">
		<code>
			public abstract cclass ShapeFamily {
				public abstract cclass Shape {}
			}
			
			public abstract cclass DecoratedShapeFamily extends ShapeFamily {
				public cclass DecoratedShape extends Shape {
					public abstract void makeDecoration();
				}
			}
			
			// The virtual class Shape is extended by a new method draw()
			// This means all subclasses of Shape now have to implement a draw() method
			public abstract cclass DrawableShapeFamily extends ShapeFamily {
				public abstract void show();
			
				public abstract cclass Shape {
					public abstract void draw();
				}
			}	
			
			// Although DecoratedShape is a subclass of Shape it doesn't need to implement draw()
			// This is because DecoratedShape is only present via requirements
			// DecoratedDrawableShapeFamily is therefore concrete
			public cclass DecoratedDrawableShapeFamily extends DrawableShapeFamily requires DecoratedShapeFamily {
				public void show() {
					DecoratedShape s = new DecoratedShape();
					s.makeDecoration();
					s.draw();
				}
			}
		</code>
	</compile>
	
	<compile-check-error id="vc006"
						 error="NEW_INCOMPLETE" 
						 description="concrete but nonetheless incomplete due to requirements">		 
		<code>
			public abstract cclass ShapeFamily {
				public abstract cclass Shape {}
			}
			
			public abstract cclass DecoratedShapeFamily extends ShapeFamily {
				public cclass DecoratedShape extends Shape {
					public abstract void makeDecoration();
				}
			}
			
			public abstract cclass DrawableShapeFamily extends ShapeFamily {
				public abstract void show();
			
				public abstract cclass Shape {
					public abstract void draw();
				}
			}	
			
			public cclass DecoratedDrawableShapeFamily extends DrawableShapeFamily requires DecoratedShapeFamily {
				public void show() {
					DecoratedShape s = new DecoratedShape();
					s.makeDecoration();
					s.draw();
				}
			}
		
			public class Test {	
				public void test(){		
					// Concreteness means no contracts are broken
					// Completeness that all requirements are fulfilled
					DecoratedDrawableShapeFamily ddsf = new DecoratedDrawableShapeFamily();
				}
			}		
		</code>
	</compile-check-error>
	
	<compile id="vc007" description="a further level in the hierarchy">		 
		<code>
			public abstract cclass ShapeFamily {
				public abstract cclass Shape {}
			}
			
			public abstract cclass DecoratedShapeFamily extends ShapeFamily {
				public cclass DecoratedShape extends Shape {
					public abstract void makeDecoration();
				}
			}
			
			public abstract cclass DrawableShapeFamily extends ShapeFamily {
				public abstract void show();
			
				public abstract cclass Shape {
					public abstract void draw();
				}
			}	
			
			public cclass DecoratedDrawableShapeFamily extends DrawableShapeFamily requires DecoratedShapeFamily {
				public void show() {
					DecoratedShape s = new DecoratedShape();
					s.makeDecoration();
					s.draw();
				}
			}
			
			// A further descendant inherits requirements etc.
			public cclass FurtherFamily extends DecoratedDrawableShapeFamily {}
		</code>
	</compile>
	
	<compile-run id="vc008" description="fulfilled requirements">		 
		<code>
			public abstract cclass ShapeFamily {
				public abstract cclass Shape {}
			}
			
			public abstract cclass DecoratedShapeFamily extends ShapeFamily {
				public cclass DecoratedShape extends Shape {
					public abstract void makeDecoration();
				}
			}
			
			public abstract cclass DrawableShapeFamily extends ShapeFamily {
				public abstract void show();
			
				public abstract cclass Shape {
					public abstract void draw();
				}
			}	
			
			public cclass DecoratedDrawableShapeFamily extends DrawableShapeFamily requires DecoratedShapeFamily {
				public void show() {
					DecoratedShape s = new DecoratedShape();
					s.makeDecoration();
					s.draw();
				}
			}
			
			// Interesting:  We do not have to implement draw() here as it is not part of the contract
			public cclass DecoratedShapeProvider extends DecoratedShapeFamily {
				public cclass DecoratedShape {
					public void makeDecoration() {/*...*/}
				}
			}
			
			// Now that we have introduced DecoratedShape via extends, we have to implement draw() to
			// fulfill the extended Shape contract
			public cclass CompleteFamily extends DecoratedDrawableShapeFamily &amp; DecoratedShapeProvider {
				public cclass DecoratedShape {
					public void draw() {/*...*/}
				}
			}
		</code>
		
		<test>
			CompleteFamily cf = new CompleteFamily();
		</test>
	</compile-run>
	
	<compile-run id="vc009" description="instantiation of virtual classes">		 
		<code>
			public abstract cclass X {
				public cclass A {
				   abstract public void foo();				
				}
			}
			
			public cclass Y requires X {
			    public cclass B extends A {
			        public void boo() { }
			    }			
			}
			
			public cclass Z extends X {
			    public cclass A {
			       public void foo() { }			    
			    }			
			}
			
			public cclass W extends Y &amp; Z { }
		</code>
		
		<test>
			W w = new W();
			W.B b = w.new B();
			b.boo();
		</test>
	</compile-run>
	
</testsuite>