<testsuite name="Test Modifiers except visibility" package="mixin.check.modifiers">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
	<compile id="stcmodifiers001" description="test simple inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB extends AAA { public void m() {} }
			public cclass Test {
				public void test() {
				   BBB b = null;
				   b.m();
				}
			}
		</code>
	</compile>
	
	<compile-check-error id="stcmodifiers001e" error="CLASS_MUST_IMPLEMENT"
		                 description="test error simple inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB extends AAA { }
			public cclass Test {
				public void test() {
				   BBB b = null;
				   b.m();
				}
			}
		</code>
	</compile-check-error>
	
	<compile id="stcmodifiers002" description="test simple indirect inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB extends AAA { }
			public cclass CCC extends BBB { public void m() {} }
			public cclass Test {
				public void test() {
				   CCC c = null;
				   c.m();
				}
			}
		</code>
	</compile>
	
	<compile-check-error id="stcmodifiers002e" error="CLASS_MUST_IMPLEMENT"
		                 description="test error simple indirect inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB extends AAA { }
			public cclass CCC extends BBB { }
			public cclass Test {
				public void test() {
				   CCC c = null;
				   c.m();
				}
			}
		</code>
	</compile-check-error>
	
	<compile id="stcmodifiers003" description="test multiple inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB { public void m() {} }
			public cclass CCC extends AAA &amp; BBB { public void m() {} }
			public class Test {
				public void test() {
				   CCC c = null;
				   c.m();
				}
			}
		</code>
	</compile>
	
	<compile id="stcmodifiers004" description="test indirect multiple inheritance with abstract method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB { public void m() {} }
			public abstract cclass CCC extends AAA &amp; BBB { }
			public cclass DDD extends CCC { public void m() {} } 
			public class Test {
				public void test() {
				   DDD d = null;
				   d.m();
				}
			}
		</code>
	</compile>
	
	<compile-check-error id="stcmodifiers005e" error="CLASS_MUST_IMPLEMENT"
	                     description="test error multiple inheritance of two abstracts methods">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB { public abstract void m(); }
			public cclass CCC extends AAA &amp; BBB { }
			public class Test {
				public void test() {
				   CCC c = null;
				   c.m();
				}
			}
		</code>
	</compile-check-error>
	
	<compile id="stcmodifiers006" description="test indirect multiple inheritance of two abstracts methods">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB { public abstract void m(); }
			public cclass CCC extends AAA &amp; BBB { public void m(){} }
			public cclass DDD extends CCC { } 
			public class Test {
				public void test() {
				   DDD d = null;
				   d.m();
				}
			}
		</code>
	</compile>
	
	<compile-check-error id="stcmodifiers006e" error="CLASS_MUST_IMPLEMENT"
		                 description="test indirect multiple inheritance of two abstracts methods">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB { public abstract void m(); }
			public cclass CCC extends AAA &amp; BBB { }
			public cclass DDD extends CCC { } 
			public class Test {
				public void test() {
				   DDD d = null;
				   d.m();
				}
			}
		</code>
	</compile-check-error>
	
	<compile id="stcmodifiers007" description="test inheritance of several abstracts classes">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public abstract cclass BBB { public abstract void m(); }
			public abstract cclass CCC extends AAA &amp; BBB { }
			public abstract cclass DDD extends CCC { }
			public class Test {
				public void test() {
				   CCC c = null;
				   c.m();
				   DDD d = null;
				   d.m();
				}
			}
		</code>
	</compile>	
	
	<compile id="stcmodifiers010" description="test static field access">
		<code>
			public abstract cclass AAA { public static String s; }	
			public class Test {
				public void test() {
				   String ss = AAA.s;
				}
			}
		</code>
	</compile>
	
	<compile id="stcmodifiers011" description="test static method access">
		<code>
			public abstract cclass AAA { public static void m(){} }	
			public class Test {
				public void test() {
				   AAA.m();
				}
			}
		</code>
	</compile>
	
	<compile id="stcmodifiers012" description="test joining abstract and concrete method">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB { public void m() {} }
			public cclass CCC extends AAA &amp; BBB { }
			public class Test {
				public void test() {
				   CCC c = null;
				   c.m();
				}
			}
		</code>
	</compile>
	
	<compile id="stcmodifiers013" description="test joining abstract and concrete method in abstract class">
		<code>
			public abstract cclass AAA { public abstract void m(); }	
			public cclass BBB { public void m() {} }
			public abstract cclass CCC extends AAA &amp; BBB { }
			public cclass DDD extends CCC { } 
			public class Test {
				public void test() {
				   DDD d = null;
				   d.m();
				}
			}
		</code>
	</compile>
	
</testsuite>